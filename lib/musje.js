(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("snapsvg"), require("MIDI"));
	else if(typeof define === 'function' && define.amd)
		define(["snapsvg", "MIDI"], factory);
	else if(typeof exports === 'object')
		exports["musje"] = factory(require("snapsvg"), require("MIDI"));
	else
		root["musje"] = factory(root["Snap"], root["MIDI"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_42__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Score = exports.parse = undefined;
	
	var _parser = __webpack_require__(1);
	
	var _parser2 = _interopRequireDefault(_parser);
	
	var _Score = __webpack_require__(3);
	
	var _Score2 = _interopRequireDefault(_Score);
	
	var _Renderer = __webpack_require__(23);
	
	var _Renderer2 = _interopRequireDefault(_Renderer);
	
	var _util = __webpack_require__(2);
	
	var _PlayerMixin = __webpack_require__(41);
	
	var _PlayerMixin2 = _interopRequireDefault(_PlayerMixin);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Render the score in jianpu (numbered musical notation).
	 * @member
	 * @function
	 * @param {string} svg
	 * @param {Object} lo - Layout options.
	 */
	_Score2.default.prototype.render = function (svg, lo) {
	  new _Renderer2.default(svg, lo).render(this);
	};
	
	(0, _util.defineProperties)(_Score2.default.prototype, _PlayerMixin2.default);
	
	/**
	 * Parse source musje string to be a Score instance.
	 * @param {string} input - Input of the musje source code.
	 * @return {Score} - A `Score` instance.
	 */
	var parse = exports.parse = function parse(input) {
	  return _parser2.default.parse(input);
	  // var plainScore = parser.parse(input);
	  // return new Score(plainScore);
	};
	
	exports.Score = _Score2.default;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* parser generated by jison 0.4.17 */
	/*
	  Returns a Parser object of the following structure:
	
	  Parser: {
	    yy: {}
	  }
	
	  Parser.prototype: {
	    yy: {},
	    trace: function(),
	    symbols_: {associative list: name ==> number},
	    terminals_: {associative list: number ==> name},
	    productions_: [...],
	    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
	    table: [...],
	    defaultActions: {...},
	    parseError: function(str, hash),
	    parse: function(input),
	
	    lexer: {
	        EOF: 1,
	        parseError: function(str, hash),
	        setInput: function(input),
	        input: function(),
	        unput: function(str),
	        more: function(),
	        less: function(n),
	        pastInput: function(),
	        upcomingInput: function(),
	        showPosition: function(),
	        test_match: function(regex_match_array, rule_index),
	        next: function(),
	        lex: function(),
	        begin: function(condition),
	        popState: function(),
	        _currentRules: function(),
	        topState: function(),
	        pushState: function(condition),
	
	        options: {
	            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
	            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
	            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
	        },
	
	        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
	        rules: [...],
	        conditions: {associative list: name ==> set},
	    }
	  }
	
	
	  token location info (@$, _$, etc.): {
	    first_line: n,
	    last_line: n,
	    first_column: n,
	    last_column: n,
	    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
	  }
	
	
	  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
	    text:        (matched text)
	    token:       (the produced terminal token, if any)
	    line:        (yylineno)
	  }
	  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
	    loc:         (yylloc)
	    expected:    (string describing the set of expected tokens)
	    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
	  }
	*/
	var parser = (function(){
	var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,23],$V8=[1,27],$V9=[1,34],$Va=[1,35],$Vb=[1,33],$Vc=[1,28],$Vd=[1,29],$Ve=[5,9,10,14,21,22,23,24,25,26,29,34,39,41,48,51,58],$Vf=[2,8],$Vg=[5,9,10,21,22,23,24,25,26,29,34,39,41,48,51,58],$Vh=[5,21,22,23,24,25,26],$Vi=[2,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[5,9,10,21,22,23,24,25,26,28,29,34,35,39,41,48,51,53,58],$Vp=[5,9,10,21,22,23,24,25,26,28,29,34,35,39,41,43,44,45,46,47,48,51,53,58],$Vq=[5,9,10,21,22,23,24,25,26,28,29,34,35,39,41,43,44,45,46,47,48,50,51,53,58],$Vr=[1,63],$Vs=[1,64],$Vt=[5,21,22,23,24,25,26,29,34,39,41,48,51,58],$Vu=[5,9,10,21,22,23,24,25,26,28,29,34,35,39,41,43,48,51,53,58],$Vv=[5,9,10,21,22,23,24,25,26,28,29,34,39,41,48,51,53,58],$Vw=[39,41,50];
	var parser = {trace: function trace() { },
	yy: {},
	symbols_: {"0":29,"error":2,"e":3,"maybe_musje":4,"EOF":5,"space":6,"maybe_space":7,"musje":8,"S":9,"NL":10,"score_head":11,"part_list":12,"title":13,"TITLE":14,"COMPOSER":15,"part":16,"measure_list":17,"bar":18,"measure":19,"music_data":20,"|":21,"||":22,"|]":23,"|:":24,":|":25,":|:":26,"slurable":27,"TIE":28,"maybe_duration":30,"voice":31,"time_signature":32,"pitchful":33,"(":34,")":35,"note":36,"chord":37,"pitch":38,"STEP":39,"OCTAVE":40,"ACCIDENTAL":41,"type_modifier":42,"DOT":43,"_":44,"=":45,"HALF":46,"WHOLE":47,"<":48,"pitch_list":49,">":50,"{":51,"voice_list":52,"}":53,"voice_data_list":54,":":55,"voice_data":56,"restslurable_list":57,"BEATS":58,"BEAT_TYPE":59,"$accept":0,"$end":1},
	terminals_: {2:"error",5:"EOF",9:"S",10:"NL",14:"TITLE",15:"COMPOSER",21:"|",22:"||",23:"|]",24:"|:",25:":|",26:":|:",28:"TIE",29:"0",34:"(",35:")",39:"STEP",40:"OCTAVE",41:"ACCIDENTAL",43:"DOT",44:"_",45:"=",46:"HALF",47:"WHOLE",48:"<",50:">",51:"{",53:"}",54:"voice_data_list",55:":",57:"restslurable_list",58:"BEATS",59:"BEAT_TYPE"},
	productions_: [0,[3,2],[4,0],[4,2],[4,3],[4,1],[6,1],[6,1],[7,0],[7,2],[7,2],[8,1],[8,1],[8,2],[11,2],[13,1],[13,2],[12,1],[16,1],[16,3],[17,1],[17,4],[17,3],[19,2],[19,3],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[20,1],[20,2],[20,2],[20,1],[20,1],[27,2],[27,3],[27,3],[27,4],[33,1],[33,1],[36,1],[38,1],[38,2],[38,2],[38,3],[30,0],[30,1],[30,1],[30,2],[42,1],[42,1],[42,2],[42,2],[42,3],[42,3],[42,1],[42,1],[37,3],[49,1],[49,2],[31,3],[52,1],[52,3],[56,1],[56,2],[32,2]],
	performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
	/* this == yyval */
	
	var $0 = $$.length - 1;
	switch (yystate) {
	case 1:
	 return $$[$0-1]; 
	break;
	case 2: case 3:
	 this.$ = null; 
	break;
	case 4: case 5:
	 this.$ = $$[$0]; removeLastEmptyMeasure($$[$0]); 
	break;
	case 10:
	 this.$ = $$[$0-1] ? $$[$0-1] + 1 : 1; 
	break;
	case 11:
	this.$ = { head: $$[$0] };
	break;
	case 12:
	this.$ = { parts: $$[$0] };
	break;
	case 13:
	this.$ = { head: $$[$0-1], parts: $$[$0] };
	break;
	case 15:
	 this.$ = { title: $$[$0] } 
	break;
	case 16:
	 this.$ =  { title: $$[$0-1], composer: $$[$0] } 
	break;
	case 17: case 60: case 63:
	this.$ = [$$[$0]];
	break;
	case 18:
	this.$ = { measures: $$[$0] };
	break;
	case 19:
	 this.$ = { measures: $$[$0]}; $$[$0][0].data.unshift({ bar: $$[$0-2] }); 
	break;
	case 20:
	 this.$ = [$$[$0]]; 
	break;
	case 21:
	 this.$ = $$[$0-3]; lastItem($$[$0-3]).data.push({ bar: $$[$0-2] }); $$[$0-3].push($$[$0]) 
	break;
	case 22:
	 this.$ = $$[$0-2]; lastItem($$[$0-2]).data.push({ bar: $$[$0-1] }); $$[$0-2].push({ data: [] }) 
	break;
	case 23:
	this.$ = { data: [$$[$0-1]] };
	break;
	case 24:
	 this.$ = $$[$0-2]; $$[$0-2].data.push($$[$0-1]) 
	break;
	case 25:
	this.$ = 'single';
	break;
	case 26:
	this.$ = 'double';
	break;
	case 27:
	this.$ = 'end';
	break;
	case 28:
	this.$ = 'repeat-begin';
	break;
	case 29:
	this.$ = 'repeat-end';
	break;
	case 30:
	this.$ = 'repeat-both';
	break;
	case 32:
	 this.$ = $$[$0-1]; onlyProperty($$[$0-1]).tie = '~' 
	break;
	case 33:
	this.$ = { rest: { duration: $$[$0] } };
	break;
	case 34:
	this.$ = { voice: $$[$0] };
	break;
	case 36:
	 this.$ = $$[$0-1]; onlyProperty($$[$0-1]).duration = $$[$0] 
	break;
	case 37:
	
	      this.$ = $$[$0-1];
	      extend(onlyProperty($$[$0-1]), {
	        duration: $$[$0],
	        slur: { begin: 'solid' }
	      })
	    
	break;
	case 38:
	
	      this.$ = $$[$0-2]
	      extend(onlyProperty($$[$0-2]), {
	        duration: $$[$0-1],
	        slur: { end: 'solid' }
	      })
	    
	break;
	case 39:
	
	      this.$ = $$[$0-2]
	      extend(onlyProperty($$[$0-2]), {
	        duration: $$[$0-1],
	        slur: { begin: 'solid', end: 'solid' }
	      })
	    
	break;
	case 40:
	this.$ = { note: $$[$0] };
	break;
	case 41:
	this.$ = { chord: $$[$0] };
	break;
	case 42:
	this.$ = { pitch: $$[$0] };
	break;
	case 43:
	this.$ = { step: +$$[$0] };
	break;
	case 44:
	this.$ = { step: +$$[$0-1], octave: octave($$[$0]) };
	break;
	case 45:
	this.$ = { accidental: $$[$0-1], step: +$$[$0] };
	break;
	case 46:
	this.$ = { accidental: $$[$0-2], step: +$$[$0-1], octave: octave($$[$0]) };
	break;
	case 48:
	this.$ = { type: $$[$0] };
	break;
	case 49:
	this.$ = { type: 4, dot: $$[$0].length };
	break;
	case 50:
	this.$ = { type: $$[$0-1], dot: $$[$0].length };
	break;
	case 51:
	this.$ = 8;
	break;
	case 52:
	this.$ = 16;
	break;
	case 53:
	this.$ = 32;
	break;
	case 54:
	this.$ = 64;
	break;
	case 55:
	this.$ = 128;
	break;
	case 56:
	this.$ = 256;
	break;
	case 57:
	this.$ = 2;
	break;
	case 58:
	this.$ = 1;
	break;
	case 59:
	this.$ = { pitches: $$[$0-1] };
	break;
	case 61: case 66:
	 this.$ = $$[$0-1]; $$[$0-1].push($$[$0]) 
	break;
	case 62:
	this.$ = $$[$0-1];
	break;
	case 64:
	 this.$ = $$[$0-2]; $$[$0-2].push($$[$0-1]) 
	break;
	case 67:
	this.$ = { time: { beats: +$$[$0-1], beatType: +$$[$0] } };
	break;
	}
	},
	table: [{3:1,4:2,5:[2,2],6:3,8:4,9:[1,5],10:[1,6],11:7,12:8,13:9,14:$V0,16:10,17:12,18:13,19:14,20:21,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:22,29:$V7,31:24,32:25,33:26,34:$V8,36:30,37:31,38:32,39:$V9,41:$Va,48:$Vb,51:$Vc,58:$Vd},{1:[3]},{5:[1,36]},o($Ve,$Vf,{7:37}),{5:[2,5]},o($Ve,[2,6]),o($Ve,[2,7]),{5:[2,11],12:38,16:10,17:12,18:13,19:14,20:21,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:22,29:$V7,31:24,32:25,33:26,34:$V8,36:30,37:31,38:32,39:$V9,41:$Va,48:$Vb,51:$Vc,58:$Vd},{5:[2,12]},o($Vg,$Vf,{7:39}),{5:[2,17]},o($Vg,[2,15],{15:[1,40]}),{5:[2,18],18:41,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6},o([9,10,29,34,39,41,48,51,58],$Vf,{7:42}),o($Vh,[2,20],{27:22,31:24,32:25,33:26,36:30,37:31,38:32,20:43,29:$V7,34:$V8,39:$V9,41:$Va,48:$Vb,51:$Vc,58:$Vd}),o($Vg,[2,25]),o($Vg,[2,26]),o($Vg,[2,27]),o($Vg,[2,28]),o($Vg,[2,29]),o($Vg,[2,30]),o($Vg,$Vf,{7:44}),o($Vg,[2,31],{28:[1,45]}),o($Vg,$Vi,{30:46,42:47,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn}),o($Vg,[2,34]),o($Vg,[2,35]),o($Vo,$Vi,{42:47,30:53,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn}),{33:54,36:30,37:31,38:32,39:$V9,41:$Va,48:$Vb},{52:55,54:[1,56]},{59:[1,57]},o($Vp,[2,40]),o($Vp,[2,41]),o($Vp,[2,42]),{38:59,39:$V9,41:$Va,49:58},o($Vq,[2,43],{40:[1,60]}),{39:[1,61]},{1:[2,1]},{5:[2,3],8:62,9:$Vr,10:$Vs,11:7,12:8,13:9,14:$V0,16:10,17:12,18:13,19:14,20:21,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,27:22,29:$V7,31:24,32:25,33:26,34:$V8,36:30,37:31,38:32,39:$V9,41:$Va,48:$Vb,51:$Vc,58:$Vd},{5:[2,13]},o($Vt,[2,14],{9:$Vr,10:$Vs}),o($Vg,[2,16]),o($Vg,$Vf,{7:65}),{9:$Vr,10:$Vs,17:66,19:14,20:21,27:22,29:$V7,31:24,32:25,33:26,34:$V8,36:30,37:31,38:32,39:$V9,41:$Va,48:$Vb,51:$Vc,58:$Vd},o($Vg,$Vf,{7:67}),o($Vt,[2,23],{9:$Vr,10:$Vs}),o($Vg,[2,32]),o($Vg,[2,33]),o($Vo,[2,48],{43:[1,68]}),o($Vo,[2,49]),o($Vu,[2,51]),o($Vu,[2,52],{44:[1,69],45:[1,70]}),o($Vu,[2,57]),o($Vu,[2,58]),o($Vv,[2,36],{35:[1,71]}),o($Vo,$Vi,{42:47,30:72,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn}),{53:[1,73]},{53:[2,63],55:[1,74]},o($Vg,[2,67]),{38:76,39:$V9,41:$Va,50:[1,75]},o($Vw,[2,60]),o($Vq,[2,44]),o($Vq,[2,45],{40:[1,77]}),{5:[2,4]},o($Ve,[2,9]),o($Ve,[2,10]),o($Vh,[2,22],{20:21,27:22,31:24,32:25,33:26,36:30,37:31,38:32,19:78,9:$Vr,10:$Vs,29:$V7,34:$V8,39:$V9,41:$Va,48:$Vb,51:$Vc,58:$Vd}),{5:[2,19],18:41,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6},o($Vt,[2,24],{9:$Vr,10:$Vs}),o($Vo,[2,50]),o($Vu,[2,53]),o($Vu,[2,54],{44:[1,79],45:[1,80]}),o($Vv,[2,38]),o($Vv,[2,37],{35:[1,81]}),o($Vg,[2,62]),{27:83,33:26,34:$V8,36:30,37:31,38:32,39:$V9,41:$Va,48:$Vb,56:82,57:[1,84]},o($Vp,[2,59]),o($Vw,[2,61]),o($Vq,[2,46]),o($Vh,[2,21],{27:22,31:24,32:25,33:26,36:30,37:31,38:32,20:43,29:$V7,34:$V8,39:$V9,41:$Va,48:$Vb,51:$Vc,58:$Vd}),o($Vu,[2,55]),o($Vu,[2,56]),o($Vv,[2,39]),{53:[2,64]},{53:[2,65]},{27:85,33:26,34:$V8,36:30,37:31,38:32,39:$V9,41:$Va,48:$Vb},{53:[2,66]}],
	defaultActions: {4:[2,5],8:[2,12],10:[2,17],36:[2,1],38:[2,13],62:[2,4],82:[2,64],83:[2,65],85:[2,66]},
	parseError: function parseError(str, hash) {
	    if (hash.recoverable) {
	        this.trace(str);
	    } else {
	        function _parseError (msg, hash) {
	            this.message = msg;
	            this.hash = hash;
	        }
	        _parseError.prototype = Error;
	
	        throw new _parseError(str, hash);
	    }
	},
	parse: function parse(input) {
	    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
	    var args = lstack.slice.call(arguments, 1);
	    var lexer = Object.create(this.lexer);
	    var sharedState = { yy: {} };
	    for (var k in this.yy) {
	        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
	            sharedState.yy[k] = this.yy[k];
	        }
	    }
	    lexer.setInput(input, sharedState.yy);
	    sharedState.yy.lexer = lexer;
	    sharedState.yy.parser = this;
	    if (typeof lexer.yylloc == 'undefined') {
	        lexer.yylloc = {};
	    }
	    var yyloc = lexer.yylloc;
	    lstack.push(yyloc);
	    var ranges = lexer.options && lexer.options.ranges;
	    if (typeof sharedState.yy.parseError === 'function') {
	        this.parseError = sharedState.yy.parseError;
	    } else {
	        this.parseError = Object.getPrototypeOf(this).parseError;
	    }
	    function popStack(n) {
	        stack.length = stack.length - 2 * n;
	        vstack.length = vstack.length - n;
	        lstack.length = lstack.length - n;
	    }
	    _token_stack:
	        var lex = function () {
	            var token;
	            token = lexer.lex() || EOF;
	            if (typeof token !== 'number') {
	                token = self.symbols_[token] || token;
	            }
	            return token;
	        };
	    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
	    while (true) {
	        state = stack[stack.length - 1];
	        if (this.defaultActions[state]) {
	            action = this.defaultActions[state];
	        } else {
	            if (symbol === null || typeof symbol == 'undefined') {
	                symbol = lex();
	            }
	            action = table[state] && table[state][symbol];
	        }
	                    if (typeof action === 'undefined' || !action.length || !action[0]) {
	                var errStr = '';
	                expected = [];
	                for (p in table[state]) {
	                    if (this.terminals_[p] && p > TERROR) {
	                        expected.push('\'' + this.terminals_[p] + '\'');
	                    }
	                }
	                if (lexer.showPosition) {
	                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
	                } else {
	                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
	                }
	                this.parseError(errStr, {
	                    text: lexer.match,
	                    token: this.terminals_[symbol] || symbol,
	                    line: lexer.yylineno,
	                    loc: yyloc,
	                    expected: expected
	                });
	            }
	        if (action[0] instanceof Array && action.length > 1) {
	            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
	        }
	        switch (action[0]) {
	        case 1:
	            stack.push(symbol);
	            vstack.push(lexer.yytext);
	            lstack.push(lexer.yylloc);
	            stack.push(action[1]);
	            symbol = null;
	            if (!preErrorSymbol) {
	                yyleng = lexer.yyleng;
	                yytext = lexer.yytext;
	                yylineno = lexer.yylineno;
	                yyloc = lexer.yylloc;
	                if (recovering > 0) {
	                    recovering--;
	                }
	            } else {
	                symbol = preErrorSymbol;
	                preErrorSymbol = null;
	            }
	            break;
	        case 2:
	            len = this.productions_[action[1]][1];
	            yyval.$ = vstack[vstack.length - len];
	            yyval._$ = {
	                first_line: lstack[lstack.length - (len || 1)].first_line,
	                last_line: lstack[lstack.length - 1].last_line,
	                first_column: lstack[lstack.length - (len || 1)].first_column,
	                last_column: lstack[lstack.length - 1].last_column
	            };
	            if (ranges) {
	                yyval._$.range = [
	                    lstack[lstack.length - (len || 1)].range[0],
	                    lstack[lstack.length - 1].range[1]
	                ];
	            }
	            r = this.performAction.apply(yyval, [
	                yytext,
	                yyleng,
	                yylineno,
	                sharedState.yy,
	                action[1],
	                vstack,
	                lstack
	            ].concat(args));
	            if (typeof r !== 'undefined') {
	                return r;
	            }
	            if (len) {
	                stack = stack.slice(0, -1 * len * 2);
	                vstack = vstack.slice(0, -1 * len);
	                lstack = lstack.slice(0, -1 * len);
	            }
	            stack.push(this.productions_[action[1]][0]);
	            vstack.push(yyval.$);
	            lstack.push(yyval._$);
	            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
	            stack.push(newState);
	            break;
	        case 3:
	            return true;
	        }
	    }
	    return true;
	}};
	
	
	const extend = __webpack_require__(2).extend
	
	const lastItem = arr => arr[arr.length - 1]
	
	const onlyProperty = obj => obj[Object.keys(obj)[0]]
	
	const octave = str => {
	  const len = str.length
	  return str.charAt(0) === ',' ? -len : len
	}
	
	const removeLastEmptyMeasure = score => {
	  const parts = score.parts
	  if (!parts) return
	
	  parts.forEach(part => {
	    const lastMeasure = lastItem(part.measures)
	    if (lastMeasure.data.length === 0) part.measures.pop()
	  })
	}
	
	/* generated by jison-lex 0.3.4 */
	var lexer = (function(){
	var lexer = ({
	
	EOF:1,
	
	parseError:function parseError(str, hash) {
	        if (this.yy.parser) {
	            this.yy.parser.parseError(str, hash);
	        } else {
	            throw new Error(str);
	        }
	    },
	
	// resets the lexer, sets new input
	setInput:function (input, yy) {
	        this.yy = yy || this.yy || {};
	        this._input = input;
	        this._more = this._backtrack = this.done = false;
	        this.yylineno = this.yyleng = 0;
	        this.yytext = this.matched = this.match = '';
	        this.conditionStack = ['INITIAL'];
	        this.yylloc = {
	            first_line: 1,
	            first_column: 0,
	            last_line: 1,
	            last_column: 0
	        };
	        if (this.options.ranges) {
	            this.yylloc.range = [0,0];
	        }
	        this.offset = 0;
	        return this;
	    },
	
	// consumes and returns one char from the input
	input:function () {
	        var ch = this._input[0];
	        this.yytext += ch;
	        this.yyleng++;
	        this.offset++;
	        this.match += ch;
	        this.matched += ch;
	        var lines = ch.match(/(?:\r\n?|\n).*/g);
	        if (lines) {
	            this.yylineno++;
	            this.yylloc.last_line++;
	        } else {
	            this.yylloc.last_column++;
	        }
	        if (this.options.ranges) {
	            this.yylloc.range[1]++;
	        }
	
	        this._input = this._input.slice(1);
	        return ch;
	    },
	
	// unshifts one char (or a string) into the input
	unput:function (ch) {
	        var len = ch.length;
	        var lines = ch.split(/(?:\r\n?|\n)/g);
	
	        this._input = ch + this._input;
	        this.yytext = this.yytext.substr(0, this.yytext.length - len);
	        //this.yyleng -= len;
	        this.offset -= len;
	        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
	        this.match = this.match.substr(0, this.match.length - 1);
	        this.matched = this.matched.substr(0, this.matched.length - 1);
	
	        if (lines.length - 1) {
	            this.yylineno -= lines.length - 1;
	        }
	        var r = this.yylloc.range;
	
	        this.yylloc = {
	            first_line: this.yylloc.first_line,
	            last_line: this.yylineno + 1,
	            first_column: this.yylloc.first_column,
	            last_column: lines ?
	                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
	                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
	              this.yylloc.first_column - len
	        };
	
	        if (this.options.ranges) {
	            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
	        }
	        this.yyleng = this.yytext.length;
	        return this;
	    },
	
	// When called from action, caches matched text and appends it on next action
	more:function () {
	        this._more = true;
	        return this;
	    },
	
	// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
	reject:function () {
	        if (this.options.backtrack_lexer) {
	            this._backtrack = true;
	        } else {
	            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
	                text: "",
	                token: null,
	                line: this.yylineno
	            });
	
	        }
	        return this;
	    },
	
	// retain first n characters of the match
	less:function (n) {
	        this.unput(this.match.slice(n));
	    },
	
	// displays already matched input, i.e. for error messages
	pastInput:function () {
	        var past = this.matched.substr(0, this.matched.length - this.match.length);
	        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
	    },
	
	// displays upcoming input, i.e. for error messages
	upcomingInput:function () {
	        var next = this.match;
	        if (next.length < 20) {
	            next += this._input.substr(0, 20-next.length);
	        }
	        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
	    },
	
	// displays the character position where the lexing error occurred, i.e. for error messages
	showPosition:function () {
	        var pre = this.pastInput();
	        var c = new Array(pre.length + 1).join("-");
	        return pre + this.upcomingInput() + "\n" + c + "^";
	    },
	
	// test the lexed token: return FALSE when not a match, otherwise return token
	test_match:function (match, indexed_rule) {
	        var token,
	            lines,
	            backup;
	
	        if (this.options.backtrack_lexer) {
	            // save context
	            backup = {
	                yylineno: this.yylineno,
	                yylloc: {
	                    first_line: this.yylloc.first_line,
	                    last_line: this.last_line,
	                    first_column: this.yylloc.first_column,
	                    last_column: this.yylloc.last_column
	                },
	                yytext: this.yytext,
	                match: this.match,
	                matches: this.matches,
	                matched: this.matched,
	                yyleng: this.yyleng,
	                offset: this.offset,
	                _more: this._more,
	                _input: this._input,
	                yy: this.yy,
	                conditionStack: this.conditionStack.slice(0),
	                done: this.done
	            };
	            if (this.options.ranges) {
	                backup.yylloc.range = this.yylloc.range.slice(0);
	            }
	        }
	
	        lines = match[0].match(/(?:\r\n?|\n).*/g);
	        if (lines) {
	            this.yylineno += lines.length;
	        }
	        this.yylloc = {
	            first_line: this.yylloc.last_line,
	            last_line: this.yylineno + 1,
	            first_column: this.yylloc.last_column,
	            last_column: lines ?
	                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
	                         this.yylloc.last_column + match[0].length
	        };
	        this.yytext += match[0];
	        this.match += match[0];
	        this.matches = match;
	        this.yyleng = this.yytext.length;
	        if (this.options.ranges) {
	            this.yylloc.range = [this.offset, this.offset += this.yyleng];
	        }
	        this._more = false;
	        this._backtrack = false;
	        this._input = this._input.slice(match[0].length);
	        this.matched += match[0];
	        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
	        if (this.done && this._input) {
	            this.done = false;
	        }
	        if (token) {
	            return token;
	        } else if (this._backtrack) {
	            // recover context
	            for (var k in backup) {
	                this[k] = backup[k];
	            }
	            return false; // rule action called reject() implying the next rule should be tested instead.
	        }
	        return false;
	    },
	
	// return next match in input
	next:function () {
	        if (this.done) {
	            return this.EOF;
	        }
	        if (!this._input) {
	            this.done = true;
	        }
	
	        var token,
	            match,
	            tempMatch,
	            index;
	        if (!this._more) {
	            this.yytext = '';
	            this.match = '';
	        }
	        var rules = this._currentRules();
	        for (var i = 0; i < rules.length; i++) {
	            tempMatch = this._input.match(this.rules[rules[i]]);
	            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
	                match = tempMatch;
	                index = i;
	                if (this.options.backtrack_lexer) {
	                    token = this.test_match(tempMatch, rules[i]);
	                    if (token !== false) {
	                        return token;
	                    } else if (this._backtrack) {
	                        match = false;
	                        continue; // rule action called reject() implying a rule MISmatch.
	                    } else {
	                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
	                        return false;
	                    }
	                } else if (!this.options.flex) {
	                    break;
	                }
	            }
	        }
	        if (match) {
	            token = this.test_match(match, rules[index]);
	            if (token !== false) {
	                return token;
	            }
	            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
	            return false;
	        }
	        if (this._input === "") {
	            return this.EOF;
	        } else {
	            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
	                text: "",
	                token: null,
	                line: this.yylineno
	            });
	        }
	    },
	
	// return next match that has a token
	lex:function lex() {
	        var r = this.next();
	        if (r) {
	            return r;
	        } else {
	            return this.lex();
	        }
	    },
	
	// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
	begin:function begin(condition) {
	        this.conditionStack.push(condition);
	    },
	
	// pop the previously active lexer condition state off the condition stack
	popState:function popState() {
	        var n = this.conditionStack.length - 1;
	        if (n > 0) {
	            return this.conditionStack.pop();
	        } else {
	            return this.conditionStack[0];
	        }
	    },
	
	// produce the lexer rule set which is active for the currently active lexer condition state
	_currentRules:function _currentRules() {
	        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
	            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
	        } else {
	            return this.conditions["INITIAL"].rules;
	        }
	    },
	
	// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
	topState:function topState(n) {
	        n = this.conditionStack.length - 1 - Math.abs(n || 0);
	        if (n >= 0) {
	            return this.conditionStack[n];
	        } else {
	            return "INITIAL";
	        }
	    },
	
	// alias for begin(condition)
	pushState:function pushState(condition) {
	        this.begin(condition);
	    },
	
	// return the number of states currently on the stack
	stateStackSize:function stateStackSize() {
	        return this.conditionStack.length;
	    },
	options: {},
	performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	var YYSTATE=YY_START;
	switch($avoiding_name_collisions) {
	case 0:return 9
	break;
	case 1:return 9
	break;
	case 2:return 9
	break;
	case 3: this.begin('title') 
	break;
	case 4: yy_.yytext = yy_.yytext.substr(0, yy_.yyleng - 2).trim()
	                          return 14 
	break;
	case 5: this.begin('INITIAL') 
	break;
	case 6: this.begin('INITIAL')
	                          yy_.yytext = yy_.yytext.trim()
	                          return 15 
	break;
	case 7: this.begin('time')
	                          yy_.yytext = yy_.yytext.substr(0, yy_.yyleng - 1)
	                          return 58 
	break;
	case 8: this.begin('INITIAL'); return 59 
	break;
	case 9:return 41
	break;
	case 10:return 39
	break;
	case 11:return 40
	break;
	case 12:return 43
	break;
	case 13:return 47
	break;
	case 14:return 46
	break;
	case 15:return 28
	break;
	case 16:return 44
	break;
	case 17:return 45
	break;
	case 18:return '.'
	break;
	case 19:return 29
	break;
	case 20:return 48
	break;
	case 21:return 50
	break;
	case 22:return 34
	break;
	case 23:return 35
	break;
	case 24:return '/'
	break;
	case 25:return '\\'
	break;
	case 26:return 23
	break;
	case 27:return 22
	break;
	case 28:return '[|'
	break;
	case 29:return 24
	break;
	case 30:return 26
	break;
	case 31:return 25
	break;
	case 32:return 21
	break;
	case 33:return 51
	break;
	case 34:return 53
	break;
	case 35:return 55
	break;
	case 36:return 10
	break;
	case 37:return 9
	break;
	case 38:return 5
	break;
	case 39:return 'INVALID'
	break;
	}
	},
	rules: [/^(?:\/\/[^\n]*)/,/^(?:\/\*([\s\S]*?)\*\/)/,/^(?:\/\*[\s\S]*)/,/^(?:<<)/,/^(?:.*>>)/,/^(?:([ \t])*([\n\r]))/,/^(?:.*)/,/^(?:(([1-9]\d{0,2})\/))/,/^(?:([1-9]\d{0,2})[^\d])/,/^(?:(#{1,2}|n|b{1,2}))/,/^(?:[1-7])/,/^(?:,+|'+)/,/^(?:\.+)/,/^(?:( *- *){3})/,/^(?:( *- *))/,/^(?: *~)/,/^(?:[_])/,/^(?:=)/,/^(?:\.)/,/^(?:[0])/,/^(?:<)/,/^(?:>)/,/^(?:\()/,/^(?:\))/,/^(?:\/)/,/^(?:\\)/,/^(?:\|\])/,/^(?:\|\|)/,/^(?:\[\|)/,/^(?:\|:)/,/^(?::\|:)/,/^(?::\|)/,/^(?:\|)/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:([\n\r]))/,/^(?:([ \t]))/,/^(?:$)/,/^(?:.)/],
	conditions: {"time":{"rules":[8],"inclusive":false},"title":{"rules":[4,5,6],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true}}
	});
	return lexer;
	})();
	parser.lexer = lexer;
	function Parser () {
	  this.yy = {};
	}
	Parser.prototype = parser;parser.Parser = Parser;
	return new Parser;
	})();
	module.exports = parser

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var IS_OBJECT = { 'funtion': true, 'object': true };
	var isObject = function isObject(obj) {
	  return IS_OBJECT[typeof obj === 'undefined' ? 'undefined' : _typeof(obj)] && !!obj;
	};
	
	var objEach = exports.objEach = function objEach(obj, callback) {
	  if (isObject(obj)) {
	    Object.keys(obj).forEach(function (key) {
	      callback(obj[key], key);
	    });
	  }
	};
	
	var extend = exports.extend = function extend(obj, ext) {
	  objEach(ext, function (val, key) {
	    obj[key] = val;
	  });
	  return obj;
	};
	
	var near = exports.near = function near(a, b) {
	  return Math.abs(a - b) < 0.00001;
	};
	
	var isAccessorProperty = function isAccessorProperty(value) {
	  return isObject(value) && (typeof value.get === 'function' || typeof value.set === 'function');
	};
	
	/**
	 * Define ES5 getter/setter properties
	 * @param {Object} obj - The object to be defined.
	 * @param {Object} props - ES5 getter/setter properties.
	 * For example:
	 * ```
	 * {
	 *   name: {
	 *     get: function () {...},
	 *     set: function () {...}
	 *   },
	 *   age: {
	 *      get:...
	 *   }
	 * }
	 * ```
	 */
	var defineProperties = exports.defineProperties = function defineProperties(obj, props) {
	  objEach(props, function (value, prop) {
	    var descriptor;
	    if (isAccessorProperty(value)) {
	      descriptor = value;
	    } else if (typeof value === 'function') {
	      descriptor = { value: value };
	    } else if (isObject(value) && value.constant) {
	      descriptor = { value: value.constant };
	    } else {
	      descriptor = {
	        value: value,
	        writable: true,
	        enumerable: true
	      };
	    }
	    Object.defineProperty(obj, prop, descriptor);
	  });
	};
	
	var toJSONWithDefault = true;
	
	var makeToJSON = exports.makeToJSON = function makeToJSON(values, elName) {
	  return function () {
	    var _this = this;
	
	    if (this.isEmpty) return;
	
	    var result = {};
	
	    objEach(values, function (defaultValue, prop) {
	      if (toJSONWithDefault || _this[prop] !== defaultValue) {
	        result[prop] = _this[prop];
	      }
	    });
	    if (!elName) return result;
	
	    var res = {};
	    res[elName] = result;
	    return res;
	  };
	};

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(2);
	
	var _ScoreHead = __webpack_require__(4);
	
	var _ScoreHead2 = _interopRequireDefault(_ScoreHead);
	
	var _PartwiseParts = __webpack_require__(5);
	
	var _PartwiseParts2 = _interopRequireDefault(_PartwiseParts);
	
	var _TimewiseMeasures = __webpack_require__(21);
	
	var _TimewiseMeasures2 = _interopRequireDefault(_TimewiseMeasures);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @param {Object} score - plain score object.
	 * @mixes PlayerMixin
	 */
	var Score = function () {
	  function Score(score) {
	    _classCallCheck(this, Score);
	
	    this.toJSON = (0, _util.makeToJSON)({
	      head: undefined,
	      parts: undefined
	    });
	
	    (0, _util.extend)(this, score);
	  }
	
	  /**
	   * Head of the score.
	   * @type {ScoreHead}
	   */
	
	
	  _createClass(Score, [{
	    key: 'walkCells',
	
	
	    /**
	     * A cell is identically a measure in a part or a part in a measure.
	     * @param {Function}
	     */
	    value: function walkCells(callback) {
	      this.parts.forEach(function (part, p) {
	        part.measures.forEach(function (cell, m) {
	          callback(cell, m, p);
	        });
	      });
	    }
	
	    /**
	     * Walk each music data.
	     * @param {Function} callback
	     */
	
	  }, {
	    key: 'walkMusicData',
	    value: function walkMusicData(callback) {
	      this.walkCells(function (cell, m, p) {
	        cell.data.forEach(function (data, d) {
	          callback(data, d, m, p);
	        });
	      });
	    }
	
	    /**
	     * Convert score to string.
	     * @return {string} Musje source code.
	     */
	
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return this.head + this.parts.map(function (part) {
	        return part.toString();
	      }).join('\n\n');
	    }
	
	    /**
	     * Custom toJSON method.
	     * @method
	     * @return {Object}
	     */
	
	  }, {
	    key: 'head',
	    get: function get() {
	      return this._head || (this._head = new _ScoreHead2.default());
	    },
	    set: function set(head) {
	      this._head = new _ScoreHead2.default(head);
	    }
	
	    /**
	     * Partwise parts.
	     * - (Getter)
	     * - (Setter)
	     * @type {PartwiseParts}
	     */
	
	  }, {
	    key: 'parts',
	    get: function get() {
	      return this._parts || (this._parts = new _PartwiseParts2.default(this));
	    },
	    set: function set(parts) {
	      this.parts.removeAll();
	      this.parts.addParts(parts);
	      this.measures.fromPartwise();
	    }
	
	    /**
	     * Timewise measures, generated by the initialize function.
	     * @type {TimewiseMeasures}
	     * @readonly
	     */
	
	  }, {
	    key: 'measures',
	    get: function get() {
	      return this._measures || (this._measures = new _TimewiseMeasures2.default(this));
	    }
	  }]);
	
	  return Score;
	}();
	
	exports.default = Score;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Construct head of the score.
	 * @class
	 * @param {Object} head
	 */
	var ScoreHead = function () {
	  function ScoreHead(head) {
	    _classCallCheck(this, ScoreHead);
	
	    this.title = '';
	    this.subtitle = '';
	    this.subsubtitle = '';
	    this.composer = undefined;
	    this.arranger = undefined;
	    this.lyricist = undefined;
	    this.toJSON = (0, _util.makeToJSON)({
	      title: undefined,
	      subtitle: undefined,
	      subsubtitle: undefined,
	      composer: undefined,
	      lyricist: undefined
	    });
	
	    (0, _util.extend)(this, head);
	  }
	
	  /**
	   * Title of the score.
	   * @type {string}
	   * @default ''
	   */
	
	
	  /**
	   * Subtitle of the score.
	   * @type {string}
	   * @default ''
	   */
	
	
	  /**
	   * Subsubtitle of the score.
	   * @type {string}
	   * @default ''
	   */
	
	
	  /**
	   * Composer of the score.
	   * @type {string}
	   */
	
	
	  /**
	   * Arranger of the score.
	   * @type {string}
	   */
	
	
	  /**
	   * Lyricist of the score.
	   * @type {string}
	   */
	
	
	  _createClass(ScoreHead, [{
	    key: 'toString',
	
	
	    /**
	     * Convert score head to string.
	     * @return {string} The converted musje head source code.
	     */
	    value: function toString() {
	      var title = this.title ? '<<' + this.title + '>>' : '';
	      return title + ' ' + (this.composer || '') + '\n';
	    }
	  }, {
	    key: 'isEmpty',
	
	
	    /**
	     * Check if the score head is empty.
	     * @type {boolean}
	     * @readonly
	     */
	    get: function get() {
	      return !this.title && !this.subtitle && !this.subsubtitle && !this.composer && !this.arranger && !this.lyricist;
	    }
	  }]);
	
	  return ScoreHead;
	}();
	
	exports.default = ScoreHead;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _PartwisePart = __webpack_require__(6);
	
	var _PartwisePart2 = _interopRequireDefault(_PartwisePart);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _extendableBuiltin(cls) {
	  function ExtendableBuiltin() {
	    cls.apply(this, arguments);
	  }
	
	  ExtendableBuiltin.prototype = Object.create(cls.prototype, {
	    constructor: {
	      value: cls,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	
	  if (Object.setPrototypeOf) {
	    Object.setPrototypeOf(ExtendableBuiltin, cls);
	  } else {
	    ExtendableBuiltin.__proto__ = cls;
	  }
	
	  return ExtendableBuiltin;
	}
	
	var PartwiseParts = function (_extendableBuiltin2) {
	  _inherits(PartwiseParts, _extendableBuiltin2);
	
	  function PartwiseParts(score) {
	    _classCallCheck(this, PartwiseParts);
	
	    var _this = _possibleConstructorReturn(this, (PartwiseParts.__proto__ || Object.getPrototypeOf(PartwiseParts)).call(this));
	
	    _this._score = score;
	    return _this;
	  }
	
	  /**
	   * Reference to the parent score.
	   * @type {Score}
	   * @readonly
	   */
	
	
	  _createClass(PartwiseParts, [{
	    key: 'addParts',
	
	
	    /**
	     * Add parts.
	     * @param {Object}
	     */
	    value: function addParts(parts) {
	      var _this2 = this;
	
	      parts.forEach(function (part) {
	        _this2.append(part);
	      });
	    }
	
	    /**
	     * Append a partwise part.
	     * @param {Object} part - Plain partwise part object.
	     * @override
	     */
	
	  }, {
	    key: 'append',
	    value: function append(part) {
	      var index = this.length;
	      var musjePart = new _PartwisePart2.default(index, this);
	      this.push(musjePart);
	      musjePart.measures = part.measures;
	    }
	
	    /**
	     * Remove all parts.
	     */
	
	  }, {
	    key: 'removeAll',
	    value: function removeAll() {
	      this.length = 0;
	    }
	  }, {
	    key: 'score',
	    get: function get() {
	      return this._score;
	    }
	  }]);
	
	  return PartwiseParts;
	}(_extendableBuiltin(Array));
	
	exports.default = PartwiseParts;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(2);
	
	var _Cell = __webpack_require__(7);
	
	var _Cell2 = _interopRequireDefault(_Cell);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class
	 * @param part {Object}
	 * @param index {number} - Index of this part in the parts.
	 * @param parts {PartwiseParts}
	 */
	var PartwisePart = function () {
	  function PartwisePart(index, parts) {
	    _classCallCheck(this, PartwisePart);
	
	    this.toJSON = (0, _util.makeToJSON)({
	      measures: undefined
	    });
	
	    this._index = index;
	    this._parts = parts;
	  }
	
	  // head: { $ref: '#/objects/PartHead' },
	
	  /**
	   * Reference to the parent parts instance.
	   * @type {PartwiseParts}
	   * @readonly
	   */
	
	
	  _createClass(PartwisePart, [{
	    key: 'toString',
	
	
	    /**
	     * Convert a partwise part to sting.
	     * @return {string} Musje partwise part source code.
	     */
	    value: function toString() {
	      return this.measures.map(function (cell) {
	        return cell;
	      }).join(' ');
	    }
	
	    /**
	     * Custom toJSON method.
	     * @return {Object}
	     */
	
	  }, {
	    key: 'parts',
	    get: function get() {
	      return this._parts;
	    }
	
	    /**
	     * Measure in a partwise part is cells.
	     * @type {Array.<Cell>}
	     */
	
	  }, {
	    key: 'measures',
	    get: function get() {
	      return this._measures || (this._measures = []);
	    },
	    set: function set(measures) {
	      var p = this._index;
	      var score = this.parts.score;
	
	      var mea = this._measures = [];
	      measures.forEach(function (cell, m) {
	        mea.push(new _Cell2.default(cell, m, p, score));
	      });
	    }
	  }]);
	
	  return PartwisePart;
	}();
	
	exports.default = PartwisePart;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _snapsvg = __webpack_require__(8);
	
	var _Time = __webpack_require__(9);
	
	var _Time2 = _interopRequireDefault(_Time);
	
	var _Bar = __webpack_require__(11);
	
	var _Bar2 = _interopRequireDefault(_Bar);
	
	var _Note = __webpack_require__(12);
	
	var _Note2 = _interopRequireDefault(_Note);
	
	var _Rest = __webpack_require__(17);
	
	var _Rest2 = _interopRequireDefault(_Rest);
	
	var _Chord = __webpack_require__(18);
	
	var _Chord2 = _interopRequireDefault(_Chord);
	
	var _Voice = __webpack_require__(19);
	
	var _Voice2 = _interopRequireDefault(_Voice);
	
	var _Beam = __webpack_require__(20);
	
	var _Beam2 = _interopRequireDefault(_Beam);
	
	var _util = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Classes = { time: _Time2.default, bar: _Bar2.default, note: _Note2.default, rest: _Rest2.default, chord: _Chord2.default, voice: _Voice2.default };
	var Bar = _Bar2.default;
	
	/**
	 * Cell is either a measure in a partwise part, or
	 * a part in a timewise measure.
	 * @param cell {Object}
	 * @param mIndex {number} - Measure index of this cell.
	 * @param pIndex {number} - Part index of this cell.
	 */
	
	var Cell = function () {
	  function Cell(cell, mIndex, pIndex, score) {
	    _classCallCheck(this, Cell);
	
	    this.toJSON = (0, _util.makeToJSON)({
	      data: undefined
	    });
	
	    this._mIndex = mIndex;
	    this._pIndex = pIndex;
	    this._score = score;
	    (0, _util.extend)(this, cell);
	    makeBeams(this, 1);
	  }
	
	  /**
	   * Reference to the root score instance.
	   * @type {Score}
	   * @readonly
	   */
	
	
	  _createClass(Cell, [{
	    key: 'append',
	
	
	    /**
	     * Append a music data to the cell.
	     * @param  {Object} musicData - Music data
	     */
	    value: function append(musicData) {
	      var type = Object.keys(musicData)[0]; // musicData has only one key
	      var instance = new Classes[type](musicData[type]);
	      instance._cell = this;
	      instance._index = this.data.length;
	      this.data.push(instance);
	    }
	
	    /**
	     * Width
	     * - (Getter) Get the cell width.
	     * - (Setter) Set the cell width, and this will cause the cell to reflow.
	     * @type {number}
	     */
	
	  }, {
	    key: 'flow',
	
	
	    /**
	     * Flow the cell.
	     */
	    value: function flow() {
	      var _layout = this.layout,
	          defs = _layout.defs,
	          options = _layout.options;
	      var musicDataSep = options.musicDataSep;
	
	      var x = 0;
	      var minHeight = void 0;
	
	      this.data.forEach(function (data) {
	        var def = data.def = defs.get(data);
	        data.x = x;
	        data.y = 0;
	        x += def.width + musicDataSep;
	        minHeight = Math.min(minHeight, def.height);
	      });
	
	      this.minWidth = x;
	      this.minHeight = minHeight;
	    }
	
	    /**
	     * Draw box of the cell.
	     * @return {Element} The box SVG rect element.
	     */
	
	  }, {
	    key: 'drawBox',
	    value: function drawBox() {
	      this._boxEl = this.el.rect(0, -this.height, this.width, this.height).addClass('bbox');
	      return this._boxEl;
	    }
	
	    /**
	     * Clear the box SVG element.
	     */
	
	  }, {
	    key: 'clearBox',
	    value: function clearBox() {
	      this._boxEl.remove();
	      this._boxEl = undefined;
	    }
	
	    /**
	     * Convert cell to string.
	     * @return {string} Converted cell in musje source code.
	     */
	
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return this.data.map(function (musicData) {
	        return musicData.toString();
	      }).join(' ');
	    }
	  }, {
	    key: 'score',
	    get: function get() {
	      return this._score;
	    }
	
	    /**
	     * Music data
	     * @type {Array.<MusicDataMixin>}
	     */
	
	  }, {
	    key: 'data',
	    get: function get() {
	      return this._data || (this._data = []);
	    },
	    set: function set(data) {
	      var _this = this;
	
	      this.length = 0;
	      data.forEach(function (datum) {
	        _this.append(datum);
	      });
	    }
	
	    /**
	     * Reference to the parent measures.
	     * @type {TimewiseMeasures}
	     * @readonly
	     */
	
	  }, {
	    key: 'measures',
	    get: function get() {
	      return this.score.measures;
	    }
	
	    /**
	     * Reference to the parent measure.
	     * @type {TimewiseMeasure}
	     * @readonly
	     */
	
	  }, {
	    key: 'measure',
	    get: function get() {
	      return this.measures[this._mIndex];
	    }
	
	    /**
	     * Reference to the parent parts.
	     * @type {PartwiseParts}
	     * @readonly
	     */
	
	  }, {
	    key: 'parts',
	    get: function get() {
	      return this.score.parts;
	    }
	
	    /**
	     * Reference to the parent part.
	     * @type {PartwisePart}
	     * @readonly
	     */
	
	  }, {
	    key: 'part',
	    get: function get() {
	      return this.parts[this._pIndex];
	    }
	
	    /**
	     * Previous cell in the part.
	     * @type {Cell|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'prev',
	    get: function get() {
	      return this.part.measures[this._mIndex - 1];
	    }
	
	    /**
	     * Next cell in the part.
	     * @type {Cell|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'next',
	    get: function get() {
	      return this.part.measures[this._mIndex + 1];
	    }
	
	    /**
	     * The first music data in the cell.
	     * @type {MusicDataMixin|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'firstData',
	    get: function get() {
	      return this.data[0];
	    }
	
	    /**
	     * The last music data in the cell.
	     * @type {MusicDataMixin|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'lastData',
	    get: function get() {
	      return this.data[this.data.length - 1];
	    }
	
	    /**
	     * The left bar of this cell.
	     * @type {Bar|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'barLeft',
	    get: function get() {
	      var firstData = this.firstData;
	
	      if (firstData && firstData.$type === 'bar') return firstData;
	
	      // Take from the previous measure.
	      var prevCell = this.prev;
	      if (prevCell) return prevCell.barRight;
	    }
	
	    /**
	     * The right bar of this cell.
	     * @type {Bar|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'barRight',
	    get: function get() {
	      var lastData = this.lastData;
	
	      if (lastData && lastData.$type === 'bar') return lastData;
	    }
	  }, {
	    key: 'width',
	    get: function get() {
	      return this._w;
	    },
	    set: function set(w) {
	      this._w = w;
	      reflow(this);
	    }
	  }, {
	    key: 'height',
	    get: function get() {
	      return this.layout.options.partHeight;
	    }
	
	    /**
	     * The x position of the cell in parent timewise measure.
	     * - Set the x value will cause the cell element translate.
	     * @type {number}
	     */
	
	  }, {
	    key: 'x',
	    get: function get() {
	      return this._x;
	    },
	    set: function set(x) {
	      this._x = x;
	      this.el.transform((0, _snapsvg.matrix)().translate(x, this.y2));
	    }
	
	    /**
	     * The y2 position of the cell in parent timewise measure.
	     * - Set the y2 value will cause the cell element translate.
	     * @type {number}
	     */
	
	  }, {
	    key: 'y2',
	    get: function get() {
	      var _layout$options = this.layout.options,
	          partHeight = _layout$options.partHeight,
	          partSep = _layout$options.partSep;
	
	      var p = this._pIndex;
	
	      return p ? (p + 1) * partHeight + p * partSep : partHeight;
	    }
	
	    /**
	     * The left bar of this cell.
	     * - barLeft at first measure of a system:
	     * ```
	     * |]  -> |
	     * :|  -> |
	     * :|: -> |:
	     * ```
	     * @type {Bar}
	     * @readonly
	     */
	
	  }, {
	    key: 'barLeftInSystem',
	    get: function get() {
	      var bar = this.barLeft;
	      if (!bar) return { width: 0, height: 0 };
	
	      // First measure in the system.
	      if (this.measure.inSystemBegin) {
	        if (bar.value === 'end' || bar.value === 'repeat-end') {
	          bar = new Bar('single');
	        } else if (bar.value === 'repeat-both') {
	          bar = new Bar('repeat-begin');
	        }
	      }
	      bar.def = this.layout.defs.get(bar);
	      return bar;
	    }
	
	    /**
	     * The right bar of this cell.
	     * - barRight at last measure of a system:
	     * ```
	     *  |: ->  |
	     * :|: -> :|
	     * ```
	     * @type {musje.Bar}
	     * @readonly
	     */
	
	  }, {
	    key: 'barRightInSystem',
	    get: function get() {
	      var system = this.measure.system;
	
	      var bar = this.barRight;
	
	      if (!bar) return { width: 0, height: 0 };
	
	      // Last measure in the system.
	      if (system && this.measure.inSystemEnd) {
	        if (bar.value === 'repeat-begin') {
	          bar = new Bar('single');
	        } else if (bar.value === 'repeat-both') {
	          bar = new Bar('repeat-end');
	        }
	      }
	      bar.def = this.layout.defs.get(bar);
	      return bar;
	    }
	  }]);
	
	  return Cell;
	}();
	
	// Reflow the cell.
	
	
	function reflow(that) {
	  that.data.forEach(function (data) {
	    data.x *= that.width / that.minWidth;
	  });
	}
	
	/**
	 * Make beams automatically in group by the groupDur.
	 * @param {number} groupDur - Duration of a beam group in quarter.
	 */
	function makeBeams(that, groupDur) {
	
	  getBeamGroups(that, groupDur).forEach(function (group) {
	    var beamLevel = {}; // it starts from 0, while underbar starts from 1
	
	    var nextHasSameBeamlevel = function nextHasSameBeamlevel(index, level) {
	      var next = group[index + 1];
	      return next && next.duration.underbar > level;
	    };
	
	    group.forEach(function (data, i) {
	      var underbar = data.duration.underbar;
	
	
	      for (var level = 0; level < underbar; level++) {
	        if (nextHasSameBeamlevel(i, level)) {
	
	          /**
	           * Beams of the note.
	           * - Produced by the {@link Cell#makeBeams} method.
	           * - The above method is call in {@link Score#prepareCells}.
	           * @memberof Note#
	           * @alias beams
	           * @type {Array.<Beam>}
	           */
	          data.beams = data.beams || [];
	
	          if (beamLevel[level]) {
	            data.beams[level] = new _Beam2.default('continue', level, data);
	          } else {
	            beamLevel[level] = true;
	            data.beams[level] = new _Beam2.default('begin', level, data);
	          }
	        } else {
	          if (beamLevel[level]) {
	            data.beams = data.beams || [];
	            data.beams[level] = new _Beam2.default('end', level, data);
	            delete beamLevel[level];
	          }
	        }
	      }
	    });
	  });
	}
	
	function getBeamGroups(that, groupDur) {
	  var groups = [];
	  var group = [];
	  var counter = 0;
	
	  var inGroup = function inGroup() {
	    return counter < groupDur && !(0, _util.near)(counter, groupDur);
	  };
	  var putGroup = function putGroup() {
	    if (group.length > 1) groups.push(group);
	    group = [];
	  };
	
	  that.data.forEach(function (musicData) {
	    if (musicData.$type !== 'note' && musicData.$type !== 'rest') return;
	
	    var duration = musicData.duration;
	
	    var dur = duration.quarter;
	
	    counter += dur;
	
	    if (inGroup()) {
	      if (duration.underbar) group.push(musicData);
	    } else if ((0, _util.near)(counter, groupDur)) {
	      group.push(musicData);
	      putGroup();
	      counter = 0;
	    } else {
	      putGroup();
	      counter %= groupDur;
	    }
	  });
	
	  putGroup();
	
	  return groups;
	}
	
	exports.default = Cell;

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(2);
	
	var _MusicData2 = __webpack_require__(10);
	
	var _MusicData3 = _interopRequireDefault(_MusicData2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Time signature.
	 * @class
	 * @param time {Object}
	 * @mixes MusicDataMixin
	 * @mixes MusicDataLayoutMixin
	 */
	var Time = function (_MusicData) {
	  _inherits(Time, _MusicData);
	
	  function Time(time) {
	    _classCallCheck(this, Time);
	
	    var _this = _possibleConstructorReturn(this, (Time.__proto__ || Object.getPrototypeOf(Time)).call(this));
	
	    _this.$type = 'time';
	    _this.beats = 4;
	    _this.beatType = 4;
	    _this.toJSON = (0, _util.makeToJSON)({
	      beats: 4,
	      beatType: 4
	    }, 'time');
	
	    (0, _util.extend)(_this, time);
	    return _this;
	  }
	
	  /**
	   * Type of time.
	   * @constant
	   * @default time
	   */
	
	
	  /**
	   * How many beats per measure.
	   * @type {number}
	   * @default
	   */
	
	
	  /**
	   * Beat type
	   * @type {number}
	   * @default
	   */
	
	
	  _createClass(Time, [{
	    key: 'toString',
	
	
	    /**
	     * Convert to musje source code.
	     * @return {string} Musje source code.
	     */
	    value: function toString() {
	      return this.beats + '/' + this.beatType;
	    }
	  }, {
	    key: 'defId',
	
	
	    /**
	     * Def id used in the SVG <defs> element.
	     * ```
	     * id := 't' beats '-' beatType
	     * ```
	     * E.g. `t3-4`
	     * @type {string}
	     * @readonly
	     */
	    get: function get() {
	      return 't' + this.beats + '-' + this.beatType;
	    }
	  }]);
	
	  return Time;
	}(_MusicData3.default);
	
	exports.default = Time;

/***/ },
/* 10 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var MusicData = function () {
	  function MusicData() {
	    _classCallCheck(this, MusicData);
	  }
	
	  _createClass(MusicData, [{
	    key: 'cell',
	
	
	    /**
	     * Reference to the parent cell.
	     * @type {Cell}
	     */
	    get: function get() {
	      return this._cell;
	    }
	
	    /**
	     * The ascendant system of the music data.
	     * @type {SystemLayout}
	     * @readonly
	     */
	
	  }, {
	    key: 'system',
	    get: function get() {
	      return this.cell.measure.system;
	    }
	
	    /**
	     * Previous music data.
	     * @type {MusicDataMixin|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'prev',
	    get: function get() {
	      return this.cell.data[this._index - 1];
	    }
	
	    /**
	     * Next music data.
	     * @type {MusicDataMixin|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'next',
	    get: function get() {
	      return this.cell.data[this._index + 1];
	    }
	
	    /**
	     * Previous music data in part, across measure.
	     * @type {MusicDataMixin|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'prevInPart',
	    get: function get() {
	      var prev = this.prev,
	          cell = this.cell;
	
	      while (!prev && cell.prev) {
	        if (!prev) {
	          cell = cell.prev;
	          prev = cell.lastData;
	        }
	      }
	      return prev;
	    }
	
	    /**
	     * Next music data in part, across measure.
	     * @type {MusicDataMixin|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'nextInPart',
	    get: function get() {
	      var next = this.next,
	          cell = this.cell;
	
	      while (!next && cell.next) {
	        if (!next) {
	          cell = cell.next;
	          next = cell.firstData;
	        }
	      }
	      return next;
	    }
	
	    /**
	     * Previous music data which has a duration.
	     * @type {MusicDataMixin|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'prevDurable',
	    get: function get() {
	      var prev = this.prev;
	
	      while (prev && !prev.duration) {
	        prev = prev.prev;
	      }return prev;
	    }
	
	    /**
	     * Next music data which has a duration.
	     * @type {MusicDataMixin|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'nextDurable',
	    get: function get() {
	      var next = this.next;
	
	      while (next && !next.duration) {
	        next = next.next;
	      }return next;
	    }
	
	    /**
	     * Previous music data which has a duration in part, across measure.
	     * @type {MusicDataMixin|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'prevDurableInPart',
	    get: function get() {
	      var prev = this.prevInPart;
	      while (prev && !prev.duration) {
	        prev = prev.prevInPart;
	      }return prev;
	    }
	
	    /**
	     * Next music data which has a duration in part, across measure.
	     * @type {MusicDataMixin|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'nextDurableInPart',
	    get: function get() {
	      var next = this.nextInPart;
	      while (next && !next.duration) {
	        next = next.nextInPart;
	      }return next;
	    }
	
	    /**
	     * The x position of the music data in the cell.
	     * @type {number}
	     */
	
	  }, {
	    key: 'x',
	    get: function get() {
	      return this._x;
	    },
	    set: function set(x) {
	      this._x = x;
	      if (this.el) this.el.attr('x', x);
	    }
	
	    /**
	     * The y position of the music data in the cell.
	     * @type {number}
	     */
	
	  }, {
	    key: 'y',
	    get: function get() {
	      return this._y;
	    },
	    set: function set(y) {
	      this._y = y;
	      if (this.el) this.el.attr('y', y);
	    }
	
	    /**
	     * The x position of the music data in the system.
	     * @type {number}
	     */
	
	  }, {
	    key: 'systemX',
	    get: function get() {
	      return this.x + this.cell.x + this.cell.measure.x;
	    }
	
	    /**
	     * The width of the music data.
	     * @type {number}
	     * @readonly
	     */
	
	  }, {
	    key: 'width',
	    get: function get() {
	      return this.def.width;
	    }
	  }]);
	
	  return MusicData;
	}();
	
	exports.default = MusicData;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _MusicData2 = __webpack_require__(10);
	
	var _MusicData3 = _interopRequireDefault(_MusicData2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var BAR_TO_STRING = {
	  single: '|', double: '||', end: '|]',
	  'repeat-begin': '|:', 'repeat-end': ':|', 'repeat-both': ':|:'
	};
	var BAR_TO_ID = {
	  single: 'bs', double: 'bd', end: 'be',
	  'repeat-begin': 'brb', 'repeat-end': 'bre', 'repeat-both': 'brbe'
	};
	
	/**
	 * @param {string} bar - The bar value, which can be either of
	 * - 'single' - `|`
	 * - 'double' - `||`
	 * - 'end' - `|]`
	 * - 'repeat-begin' - `|:`
	 * - 'repeat-end' - `:|`
	 * - 'repeat-both' - `:|:`
	 */
	
	var Bar = function (_MusicData) {
	  _inherits(Bar, _MusicData);
	
	  function Bar(bar) {
	    _classCallCheck(this, Bar);
	
	    var _this = _possibleConstructorReturn(this, (Bar.__proto__ || Object.getPrototypeOf(Bar)).call(this));
	
	    _this.$type = 'bar';
	
	    _this._value = bar;
	    return _this;
	  }
	
	  /**
	   * Type of bar.
	   * @constant
	   * @readonly
	   * @default bar
	   */
	
	
	  _createClass(Bar, [{
	    key: 'toString',
	
	
	    /**
	     * Convert bar to string.
	     * @return {string} Converted string of the barline in musje source code.
	     */
	    value: function toString() {
	      return BAR_TO_STRING[this.value];
	    }
	
	    /**
	     * [toJSON description]
	     * @return {Object} { bar: value }
	     */
	
	  }, {
	    key: 'toJSON',
	    value: function toJSON() {
	      return { bar: this.value };
	    }
	  }, {
	    key: 'value',
	
	
	    /**
	     * Value of the bar, which is the same as the bar parameter in the constructor.
	     * @type {string}
	     * @default single
	     * @readonly
	     */
	    get: function get() {
	      return this._value || (this._value = 'single');
	    }
	
	    /**
	     * Def id used in the SVG <defs> element.
	     * ```
	     * defId    Bar value
	     * ----------------------
	     * 'bs'   - single
	     * 'bd'   - double
	     * 'be'   - repeat-end
	     * 'brb'  - repeat-begin
	     * 'bre'  - repeat-end
	     * 'brbe' - repeat-both
	     * ```
	     * @type {string}
	     * @readonly
	     */
	
	  }, {
	    key: 'defId',
	    get: function get() {
	      return BAR_TO_ID[this.value];
	    }
	  }]);
	
	  return Bar;
	}(_MusicData3.default);
	
	exports.default = Bar;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(2);
	
	var _MusicData2 = __webpack_require__(10);
	
	var _MusicData3 = _interopRequireDefault(_MusicData2);
	
	var _Pitch = __webpack_require__(13);
	
	var _Pitch2 = _interopRequireDefault(_Pitch);
	
	var _Duration = __webpack_require__(14);
	
	var _Duration2 = _interopRequireDefault(_Duration);
	
	var _Tie = __webpack_require__(15);
	
	var _Tie2 = _interopRequireDefault(_Tie);
	
	var _Slur = __webpack_require__(16);
	
	var _Slur2 = _interopRequireDefault(_Slur);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class
	 * @param {Object} note
	 * @mixes MusicDataMixin
	 * @mixes MusicDataLayoutMixin
	 */
	var Note = function (_MusicData) {
	  _inherits(Note, _MusicData);
	
	  function Note(note) {
	    _classCallCheck(this, Note);
	
	    var _this = _possibleConstructorReturn(this, (Note.__proto__ || Object.getPrototypeOf(Note)).call(this));
	
	    _this.$type = 'note';
	    _this.toJSON = (0, _util.makeToJSON)({
	      pitch: undefined,
	      duration: undefined,
	      tie: undefined,
	      slur: undefined
	    }, 'note');
	
	    (0, _util.extend)(_this, note);
	    return _this;
	  }
	
	  /**
	   * Type of note.
	   * @constant
	   * @default note
	   */
	
	
	  _createClass(Note, [{
	    key: 'toString',
	
	
	    /** @method */
	    value: function toString() {
	      return this.slur.begin + this.pitch + this.duration + this.slur.end + this.tie.value;
	    }
	  }, {
	    key: 'defId',
	
	
	    /**
	     * Unique def id of the note used in the SVG <defs> element.
	     * ```
	     * defId := 'n' accidental step octave type dot
	     * ```
	     * E.g.
	     * ```
	     * Note     defId
	     * ------------------
	     * 1        n1040
	     * b3-      nb3020
	     * #5'_.    ns5181
	     * 6,,      n6-2
	     * ```
	     * @type {string}
	     * @readonly
	     */
	    get: function get() {
	      var _pitch = this.pitch,
	          accidental = _pitch.accidental,
	          step = _pitch.step,
	          octave = _pitch.octave;
	      var _duration = this.duration,
	          type = _duration.type,
	          dot = _duration.dot;
	
	      return 'n' + accidental.replace(/#/g, 's') + step + octave + type + dot;
	    }
	
	    /**
	     * Pitch of the note.
	     * @type {musje.Pitch}
	     */
	
	  }, {
	    key: 'pitch',
	    get: function get() {
	      return this._pitch || (this._pitch = new _Pitch2.default(this));
	    },
	    set: function set(pitch) {
	      this._pitch = new _Pitch2.default(this, pitch);
	    }
	
	    /**
	     * Duration of the note.
	     * @type {musje.Duration}
	     */
	
	  }, {
	    key: 'duration',
	    get: function get() {
	      return this._duration || (this._duration = new _Duration2.default());
	    },
	    set: function set(duration) {
	      this._duration = new _Duration2.default(duration);
	    }
	  }, {
	    key: 'beams',
	    get: function get() {
	      return this._beams || (this._beams = []);
	    },
	    set: function set(beams) {
	      this._beams = beams;
	    }
	
	    /**
	     * Tie
	     * @type {musje.Tie}
	     */
	
	  }, {
	    key: 'tie',
	    get: function get() {
	      return this._tie || (this._tie = new _Tie2.default(this));
	    },
	    set: function set(tie) {
	      /**
	       * Value of the tie.
	       * @memberof Tie#
	       * @alias value
	       * @type {boolean}
	       */
	      this.tie.value = tie;
	    }
	
	    /**
	     * Slur
	     * @type {Slur}
	     */
	
	  }, {
	    key: 'slur',
	    get: function get() {
	      return this._slur || (this._slur = new _Slur2.default(this));
	    },
	    set: function set(slur) {
	      (0, _util.extend)(this.slur, slur);
	    }
	  }]);
	
	  return Note;
	}(_MusicData3.default);
	
	exports.default = Note;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var A4_FREQUENCY = 440;
	var A4_MIDI_NUMBER = 69;
	var STEP_TO_MIDI_NUMBER = [undefined, 0, 2, 4, 5, 7, 9, 11];
	var ACCIDENTAL_TO_ALTER = { '#': 1, '##': 2, n: 0, b: -1, bb: -2 };
	
	var chars = function chars(ch, num) {
	  return new Array(num + 1).join(ch);
	};
	var octaveString = function octaveString(octave) {
	  return octave > 0 ? chars('\'', octave) : octave < 0 ? chars(',', -octave) : '';
	};
	
	// /**
	//  * Step is a value of `1`, `2`, `3`, `4`, `5`, `6`, or `7`.
	//  * @type {number}
	//  * @default
	//  */
	// step = 1
	
	// /**
	//  * Octave is an integer value from `-5` to `5` inclusive.
	//  * @type {number}
	//  * @default
	//  */
	// octave = 0
	
	// /**
	//  * Accidental is either of
	//  * - `'#'` - sharp
	//  * - `'##'` - double sharp
	//  * - `'b'` - flat
	//  * - `'bb'` - double flat
	//  * - `'n'` - natural
	//  * - `''` - (none)
	//  * @type {string}
	//  */
	// accidental = ''
	
	/**
	 * @class
	 * @param parent {Note|Chord}
	 * @param pitch {Object}
	 */
	
	var Pitch = function () {
	  function Pitch(parent, _ref) {
	    var _ref$step = _ref.step,
	        step = _ref$step === undefined ? 1 : _ref$step,
	        _ref$octave = _ref.octave,
	        octave = _ref$octave === undefined ? 0 : _ref$octave,
	        _ref$accidental = _ref.accidental,
	        accidental = _ref$accidental === undefined ? '' : _ref$accidental;
	
	    _classCallCheck(this, Pitch);
	
	    this.toJSON = (0, _util.makeToJSON)({
	      step: 1,
	      octave: 0,
	      accidental: ''
	    });
	
	    this._parent = parent;
	    (0, _util.extend)(this, { step: step, octave: octave, accidental: accidental });
	  }
	
	  /**
	   * Reference to the parent parent.
	   * @type {Note|Chord}
	   * @readonly
	   */
	
	
	  _createClass(Pitch, [{
	    key: 'toString',
	
	
	    /**
	     * Convert to musje source code string.
	     * @return {string} Converted musje source code string.
	     */
	    value: function toString() {
	      return this.accidental + this.step + octaveString(this.octave);
	    }
	  }, {
	    key: 'parent',
	    get: function get() {
	      return this._parent;
	    }
	
	    /**
	     * Def id used in the SVG <defs> element.
	     * ```
	     * defId := 'p' accidental step octave
	     * ```
	     * @type {string}
	     * @readonly
	     */
	
	  }, {
	    key: 'defId',
	    get: function get() {
	      return 'p' + this.accidental.replace(/#/g, 's') + this.step + this.octave;
	    }
	
	    /**
	     * Alter (from -2 to 2 inclusive).
	     *
	     * If no accidental in this pitch, it might be affected by a previous note in the same cell (the same part and the same measure).
	     * @type {number}
	     * @readonly
	     */
	
	  }, {
	    key: 'alter',
	    get: function get() {
	      if (this.accidental) return ACCIDENTAL_TO_ALTER[this.accidental];
	      var alterLink = this.alterLink;
	
	      return alterLink ? alterLink.alter : 0;
	    }
	
	    /**
	     * Pitch linked that will affect the alter in this pitch.
	     * @type {Pitch|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'alterLink',
	    get: function get() {
	      var prevData = this.parent.prev;
	
	      while (prevData) {
	        if (prevData.$type === 'note' && prevData.pitch.step === this.step && prevData.pitch.accidental) {
	          return prevData.pitch;
	        }
	        prevData = prevData.prev;
	      }
	    }
	
	    /**
	     * The MIDI note number of the pitch
	     * @type {number}
	     */
	
	  }, {
	    key: 'midiNumber',
	    get: function get() {
	      return (this.octave + 5) * 12 + STEP_TO_MIDI_NUMBER[this.step] + this.alter;
	    }
	
	    /**
	     * Frequency of the pitch
	     * @type {number}
	     * @readonly
	     */
	
	  }, {
	    key: 'frequency',
	    get: function get() {
	      return A4_FREQUENCY * Math.pow(2, (this.midiNumber - A4_MIDI_NUMBER) / 12);
	    }
	  }]);
	
	  return Pitch;
	}();
	
	exports.default = Pitch;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var TYPE_TO_STRING = {
	  1: ' - - - ', 2: ' - ', 4: '', 8: '_', 16: '=', 32: '=_',
	  64: '==', 128: '==_', 256: '===', 512: '===_', 1024: '===='
	};
	var TYPE_TO_UNDERBAR = {
	  1: 0, 2: 0, 4: 0, 8: 1, 16: 2, 32: 3,
	  64: 4, 128: 5, 256: 6, 512: 7, 1024: 8
	};
	var DOT_TO_STRING = ['', '.', '..'];
	
	// /**
	//  * Beat type
	//  * @type {number}
	//  * @default
	//  */
	// type = 4
	
	// *
	//  * Dot with value of 0, 1, or 2.
	//  * @type {number}
	//  * @default
	
	// dot = 0
	
	var Duration = function () {
	  function Duration() {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref$type = _ref.type,
	        type = _ref$type === undefined ? 4 : _ref$type,
	        _ref$dot = _ref.dot,
	        dot = _ref$dot === undefined ? 0 : _ref$dot;
	
	    _classCallCheck(this, Duration);
	
	    this.$type = 'duration';
	    this.toJSON = (0, _util.makeToJSON)({
	      type: 4,
	      dot: 0
	    });
	
	    (0, _util.extend)(this, { type: type, dot: dot });
	  }
	
	  /**
	   * Type of duration.
	   * @constant
	   * @default duration
	   */
	
	
	  _createClass(Duration, [{
	    key: 'toString',
	
	
	    /**
	     * @return {string}
	     */
	    value: function toString() {
	      return TYPE_TO_STRING[this.type] + DOT_TO_STRING[this.dot];
	    }
	
	    /**
	     * [toJSON description]
	     * @return {Object}
	     */
	
	  }, {
	    key: 'defId',
	
	
	    /**
	     * Def id used in the SVG <defs> element.
	     * ```
	     * defId := 'd' type dot
	     * ```
	     * *E.g.*
	     * ```
	     * Note     defId
	     * ----------------
	     * 1.       d41
	     * 1_       d80
	     * 1=       d160
	     * 1-..     d22
	     * ```
	     * @type {string}
	     * @readonly
	     */
	    get: function get() {
	      return 'd' + this.type + this.dot;
	    }
	
	    /**
	     * `(Getter)` Duration measured in quarter note.
	     * @type {number}
	     */
	
	  }, {
	    key: 'quarter',
	    get: function get() {
	      var d = 4 / this.type;
	      return this.dot === 0 ? d : this.dot === 1 ? d * 1.5 : d * 1.75;
	    }
	
	    /**
	     * `(Getter)` Duration in second
	     * Affected by the tempo.
	     * @type {number}
	     * @readonly
	     */
	
	  }, {
	    key: 'second',
	    get: function get() {
	      return this.quarter * 60 / 80; // / TEMPO;
	    }
	
	    /**
	     * `(Getter)` Number of underbars in the beam.
	     * @type {number}
	     * @readonly
	     */
	
	  }, {
	    key: 'underbar',
	    get: function get() {
	      return TYPE_TO_UNDERBAR[this.type] || 0;
	    }
	  }]);
	
	  return Duration;
	}();
	
	exports.default = Duration;

/***/ },
/* 15 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Tie of the note.
	 * @param parent {Note|Chord}
	 */
	var Tie = function () {
	  function Tie(parent) {
	    _classCallCheck(this, Tie);
	
	    this.value = '';
	
	    this._parent = parent;
	  }
	
	  _createClass(Tie, [{
	    key: 'toJSON',
	    value: function toJSON() {
	      return this.value;
	    }
	  }, {
	    key: 'parent',
	    get: function get() {
	      return this._parent;
	    }
	  }, {
	    key: 'begin',
	    get: function get() {
	      return this.value;
	    }
	  }, {
	    key: 'end',
	    get: function get() {
	      return this.prevParent;
	    }
	
	    /**
	     * The previous durable music data in part, if it is a tie begin.
	     * @type {Durable|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'prevParent',
	    get: function get() {
	      var prev = this.parent.prevDurableInPart;
	      return prev && prev.tie && prev.tie.value && prev;
	    }
	
	    /**
	     * The next durable music data in part.
	     * @type {Durable|undefined}
	     * @readonly
	     */
	
	  }, {
	    key: 'nextParent',
	    get: function get() {
	      return this.value && this.parent.nextDurableInPart;
	    }
	
	    /**
	     * If previous durable music data in part has error.
	     * @type {boolean}
	     * @readonly
	     */
	
	  }, {
	    key: 'prevHasError',
	    get: function get() {
	      var prev = this.prevParent;
	      if (!prev || !prev.pitch) return true;
	      return prev.pitch && prev.pitch.midiNumber !== this.parent.pitch.midiNumber;
	    }
	
	    /**
	     * If next durable music data in part has error.
	     * @type {boolean}
	     * @readonly
	     */
	
	  }, {
	    key: 'nextHasError',
	    get: function get() {
	      var next = this.nextParent;
	      if (!next || !next.pitch) return true;
	      return next.pitch.midiNumber !== this.parent.pitch.midiNumber;
	    }
	  }]);
	
	  return Tie;
	}();
	
	exports.default = Tie;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Slur
	 * @class
	 * @param parent {Note|Chord}
	 */
	var Slur = function () {
	  function Slur(parent) {
	    _classCallCheck(this, Slur);
	
	    this.begin = '';
	    this.end = '';
	    this.toJSON = (0, _util.makeToJSON)({
	      begin: undefined,
	      end: undefined
	    });
	
	    this._parent = parent;
	  }
	
	  _createClass(Slur, [{
	    key: 'parent',
	
	
	    /**
	     * Parent music data.
	     * @type {Note|Chord}
	     * @readonly
	     */
	    get: function get() {
	      return this._parent;
	    }
	
	    /**
	     * Previous slurred parent.
	     * @type {Note|Chord}
	     * @readonly
	     */
	
	  }, {
	    key: 'prevParent',
	    get: function get() {
	      if (!this.end) return;
	
	      var prev = this.parent.prevInPart;
	      while (prev) {
	        if (prev.slur && !prev.slur.isEmpty) return prev;
	        prev = prev.prevInPart;
	      }
	    }
	
	    /**
	     * Next Slurred parent.
	     * @type {Note|Chord}
	     * @readonly
	     */
	
	  }, {
	    key: 'nextParent',
	    get: function get() {
	      if (!this.begin) return;
	
	      var next = this.parent.nextInPart;
	      while (next) {
	        if (next.slur && !next.slur.isEmpty) return next;
	        next = next.nextInPart;
	      }
	    }
	
	    /**
	     * @todo Nested tie in slur.
	     * @type {boolean}
	     * @readonly
	     */
	
	  }, {
	    key: 'prevCrossTie',
	    get: function get() {}
	
	    /**
	     * @todo Nested tie in slur.
	     * @type {boolean}
	     * @readonly
	     */
	
	  }, {
	    key: 'nextCrossTie',
	    get: function get() {}
	
	    /**
	     * If the previous slur has error.
	     * @type {boolean}
	     * @readonly
	     */
	
	  }, {
	    key: 'prevHasError',
	    get: function get() {
	      var prevParent = this.prevParent;
	
	      return !prevParent || !prevParent.slur.begin;
	    }
	
	    /**
	     * If the next slur has error.
	     * @type {boolean}
	     * @readonly
	     */
	
	  }, {
	    key: 'nextHasError',
	    get: function get() {
	      var nextParent = this.nextParent;
	
	      return !nextParent || !nextParent.slur.end;
	    }
	
	    /**
	     * If the slur is empty.
	     * @type {boolean}
	     * @readonly
	     */
	
	  }, {
	    key: 'isEmpty',
	    get: function get() {
	      return !(this.begin || this.end);
	    }
	
	    /**
	     * Convert the slur to JSON object.
	     * @method
	     * @return {Object} JSON object.
	     */
	
	  }]);
	
	  return Slur;
	}();
	
	exports.default = Slur;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(2);
	
	var _MusicData2 = __webpack_require__(10);
	
	var _MusicData3 = _interopRequireDefault(_MusicData2);
	
	var _Duration = __webpack_require__(14);
	
	var _Duration2 = _interopRequireDefault(_Duration);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class
	 * @param {rest} rest
	 * @mixes MusicDataMixin
	 * @mixes MusicDataLayoutMixin
	 */
	var Rest = function (_MusicData) {
	  _inherits(Rest, _MusicData);
	
	  function Rest(rest) {
	    _classCallCheck(this, Rest);
	
	    var _this = _possibleConstructorReturn(this, (Rest.__proto__ || Object.getPrototypeOf(Rest)).call(this));
	
	    _this.$type = 'rest';
	    _this.toJSON = (0, _util.makeToJSON)({
	      duration: undefined
	    }, 'rest');
	
	    (0, _util.extend)(_this, rest);
	    return _this;
	  }
	
	  /**
	   * Type of rest.
	   * @constant
	   * @default rest
	   */
	
	
	  _createClass(Rest, [{
	    key: 'toString',
	
	
	    /**
	     * Convert the rest to musje source code string.
	     * @return {string} Converted musje source code.
	     */
	    value: function toString() {
	      return '0' + this.duration;
	    }
	  }, {
	    key: 'defId',
	
	
	    /**
	     * Unique def id of the rest used in the SVG <defs> element.
	     * ```
	     * defId := 'r' type dot
	     * ```
	     * E.g.
	     * ```
	     * Rest     defId
	     * ----------------
	     * 0        r40
	     * 0 -      r20
	     * 0=.      r161
	     * ```
	     * @type {string}
	     * @readonly
	     */
	    get: function get() {
	      var _duration = this.duration,
	          type = _duration.type,
	          dot = _duration.dot;
	
	      return 'r' + type + dot;
	    }
	
	    /**
	     * Duration of the rest.
	     * @type {Duration}
	     */
	
	  }, {
	    key: 'duration',
	    get: function get() {
	      return this._duration || (this._duration = new _Duration2.default());
	    },
	    set: function set(duration) {
	      this._duration = new _Duration2.default(duration);
	    }
	  }, {
	    key: 'beams',
	    get: function get() {
	      return this._beams || (this._beams = []);
	    },
	    set: function set(beams) {
	      this._beams = beams;
	    }
	  }]);
	
	  return Rest;
	}(_MusicData3.default);
	
	exports.default = Rest;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(2);
	
	var _MusicData2 = __webpack_require__(10);
	
	var _MusicData3 = _interopRequireDefault(_MusicData2);
	
	var _Pitch = __webpack_require__(13);
	
	var _Pitch2 = _interopRequireDefault(_Pitch);
	
	var _Duration = __webpack_require__(14);
	
	var _Duration2 = _interopRequireDefault(_Duration);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class
	 * @param {Object} chord
	 * @mixes MusicDataMixin
	 * @mixes MusicDataLayoutMixin
	 */
	var Chord = function (_MusicData) {
	  _inherits(Chord, _MusicData);
	
	  function Chord(chord) {
	    _classCallCheck(this, Chord);
	
	    var _this = _possibleConstructorReturn(this, (Chord.__proto__ || Object.getPrototypeOf(Chord)).call(this));
	
	    _this.$type = 'chord';
	    _this.toJSON = (0, _util.makeToJSON)({
	      pitches: undefined,
	      duration: undefined
	    }, 'chord');
	
	    (0, _util.extend)(_this, chord);
	    return _this;
	  }
	
	  /**
	   * Type of chord.
	   * @constant
	   * @default chord
	   */
	
	
	  _createClass(Chord, [{
	    key: 'toString',
	
	
	    /**
	     * Convert chord to the musje source code string.
	     * @return {string} Converted musje source code of the chord.
	     */
	    value: function toString() {
	      return '<' + this.pitches.map(function (pitch) {
	        return pitch.toString();
	      }).join('') + '>' + this.duration;
	    }
	  }, {
	    key: 'pitches',
	
	
	    /**
	     * Pitches in the chord.
	     * @type {Array.<Pitch>}
	     */
	    get: function get() {
	      return this._pitches || (this._pitches = []);
	    },
	    set: function set(pitches) {
	      this._pitches = pitches.map(function (pitch) {
	        return new _Pitch2.default(pitch);
	      });
	    }
	
	    /**
	     * Duration of the chord.
	     * @type {Duration}
	     */
	
	  }, {
	    key: 'duration',
	    get: function get() {
	      return this._duration || (this._duration = new _Duration2.default());
	    },
	    set: function set(duration) {
	      this._duration = new _Duration2.default(duration);
	    }
	  }]);
	
	  return Chord;
	}(_MusicData3.default);
	
	exports.default = Chord;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(2);
	
	var _MusicData2 = __webpack_require__(10);
	
	var _MusicData3 = _interopRequireDefault(_MusicData2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * @class
	 * @param {Object} voice
	 */
	var Voice = function (_MusicData) {
	  _inherits(Voice, _MusicData);
	
	  function Voice(voice) {
	    _classCallCheck(this, Voice);
	
	    var _this = _possibleConstructorReturn(this, (Voice.__proto__ || Object.getPrototypeOf(Voice)).call(this));
	
	    _this.$type = 'voice';
	
	    (0, _util.extend)(_this, voice);
	    return _this;
	  }
	
	  /**
	   * Type of voice.
	   * @constant
	   * @default voice
	   */
	
	
	  _createClass(Voice, [{
	    key: 'toString',
	
	
	    /**
	     * Convert the voice to musje source code string.
	     * @return {string} Converted musje source code string.
	     */
	    value: function toString() {}
	  }]);
	
	  return Voice;
	}(_MusicData3.default);
	
	exports.default = Voice;

/***/ },
/* 20 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * A [beam][wiki] is a horizontal or diagonal line used to connect multiple consecutive notes (and occasionally rests) in order to indicate rhythmic grouping. Only eighth notes (quavers) or shorter can be beamed.
	 *
	 * [wiki]: https://en.wikipedia.org/wiki/Beam_(music)
	 *
	 * Beam is created by {@link Cell#makeBeams} and
	 * attached to {@link Durable} in {@link Durable#beams}[level]
	 * @class
	 * @param {string} value - Beam value: `'begin'`, `'continue'` or `'end'`.
	 * @param {number} level - Beam level starting from 0 to up.
	 * @param {Durable} parent - The parent durable music data.
	 */
	var Beam = function () {
	  function Beam(value, level, parent) {
	    _classCallCheck(this, Beam);
	
	    this._value = value;
	    this._level = level;
	    this._parent = parent;
	  }
	
	  /**
	   * Parent
	   * @type {Note|Rest|Chord}
	   * @readonly
	   */
	
	
	  _createClass(Beam, [{
	    key: 'parent',
	    get: function get() {
	      return this._parent;
	    }
	
	    /**
	     * Beam value: `'begin'`, `'continue'` or `'end'`.
	     * @type {string}
	     * @readonly
	     */
	
	  }, {
	    key: 'value',
	    get: function get() {
	      return this._value;
	    }
	
	    /**
	     * Beam level starting from 0 to up.
	     * @type {number}
	     * @readonly
	     */
	
	  }, {
	    key: 'level',
	    get: function get() {
	      return this._level;
	    }
	
	    /**
	     * The end parent music data of the beam group.
	     * @type {MusicDataMixin}
	     */
	
	  }, {
	    key: 'endDurable',
	    get: function get() {
	      var nextData = this.parent.next;
	      while (nextData && nextData.beams[this.level].value !== 'end') {
	        nextData = nextData.next;
	      }
	      return nextData;
	    }
	  }]);
	
	  return Beam;
	}();
	
	exports.default = Beam;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _TimewiseMeasure = __webpack_require__(22);
	
	var _TimewiseMeasure2 = _interopRequireDefault(_TimewiseMeasure);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _extendableBuiltin(cls) {
	  function ExtendableBuiltin() {
	    cls.apply(this, arguments);
	  }
	
	  ExtendableBuiltin.prototype = Object.create(cls.prototype, {
	    constructor: {
	      value: cls,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	
	  if (Object.setPrototypeOf) {
	    Object.setPrototypeOf(ExtendableBuiltin, cls);
	  } else {
	    ExtendableBuiltin.__proto__ = cls;
	  }
	
	  return ExtendableBuiltin;
	}
	
	/**
	 * Construct timewise score measures.
	 * @class
	 * @classdesc Timewise score measures.
	 * @param score {Score}
	 * @augments {Array}
	 */
	var TimewiseMeasures = function (_extendableBuiltin2) {
	  _inherits(TimewiseMeasures, _extendableBuiltin2);
	
	  function TimewiseMeasures(score) {
	    _classCallCheck(this, TimewiseMeasures);
	
	    var _this = _possibleConstructorReturn(this, (TimewiseMeasures.__proto__ || Object.getPrototypeOf(TimewiseMeasures)).call(this));
	
	    _this._score = score;
	    return _this;
	  }
	
	  /**
	   * Reference to the parent score.
	   * @type {Score}
	   * @readonly
	   */
	
	
	  _createClass(TimewiseMeasures, [{
	    key: 'fromPartwise',
	
	
	    /**
	     * Make timewise score measures from the partwise parts.
	     */
	    value: function fromPartwise() {
	      var _this2 = this;
	
	      this.removeAll();
	      this.score.walkCells(function (cell, m) {
	        if (m === _this2.length && !_this2[m]) _this2.push(new _TimewiseMeasure2.default(m, _this2));
	        _this2[m].parts.push(cell);
	      });
	    }
	
	    /**
	     * Remove all measures.
	     */
	
	  }, {
	    key: 'removeAll',
	    value: function removeAll() {
	      this.length = 0;
	    }
	  }, {
	    key: 'score',
	    get: function get() {
	      return this._score;
	    }
	  }]);
	
	  return TimewiseMeasures;
	}(_extendableBuiltin(Array));
	
	exports.default = TimewiseMeasures;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _snapsvg = __webpack_require__(8);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class
	 * @param measure {Object}
	 * @mixes TimewiseMeasureLayoutMixin
	 */
	var TimewiseMeasure = function () {
	  function TimewiseMeasure(index, measures) {
	    _classCallCheck(this, TimewiseMeasure);
	
	    // this._index = index
	    this._measures = measures;
	  }
	
	  /**
	   * Reference to the parent measures instance.
	   * @member {TimewiseMeasures}
	   */
	
	
	  _createClass(TimewiseMeasure, [{
	    key: 'flow',
	
	
	    /**
	     * Flow the measure.
	     */
	    value: function flow() {
	      var _this = this;
	
	      this.parts.forEach(function (cell) {
	
	        /**
	         * Cell SVG group element.
	         * @memberof CellLayout#
	         * @alias el
	         * @type {Snap.Element}
	         * @readonly
	         */
	        cell.el = _this.el.g().addClass('mus-cell');
	
	        cell.x = _this.outerWidthLeft;
	
	        // cell.drawBox()
	      });
	    }
	
	    /**
	     * Draw box of the cell.
	     * @return {Snap.Element} The box SVG rect element.
	     */
	
	  }, {
	    key: 'drawBox',
	    value: function drawBox() {
	      this._boxEl = this.el.rect(0, 0, this.width, this.height).attr({ stroke: 'green', fill: 'none' });
	    }
	
	    /**
	     * Clear the box SVG element.
	     */
	
	  }, {
	    key: 'clearBox',
	    value: function clearBox() {
	      this._boxEl.remove();
	      this._boxEl = undefined;
	    }
	  }, {
	    key: 'measures',
	    get: function get() {
	      return this._measures;
	    }
	
	    /**
	     * Parts in timewise measure.
	     * @type {Array.<Cell>}
	     */
	
	  }, {
	    key: 'parts',
	    get: function get() {
	      return this._parts || (this._parts = []);
	    },
	    set: function set(parts) {
	      this._parts = parts;
	    }
	
	    /**
	     * Left bar of the measure.
	     * @type {Bar}
	     * @readonly
	     */
	
	  }, {
	    key: 'barLeft',
	    get: function get() {
	      return this.parts[0].barLeft;
	    }
	
	    /**
	     * Right bar of the measure.
	     * @type {Bar}
	     * @readonly
	     */
	
	  }, {
	    key: 'barRight',
	    get: function get() {
	      return this.parts[0].barRight;
	    }
	
	    /**
	     * Measure SVG group element.
	     * @type {Snap.Element}
	     * @readonly
	     */
	
	  }, {
	    key: 'el',
	    get: function get() {
	      return this._el;
	    }
	
	    /**
	     * Minimun width of the measure.
	     * @type {number}
	     */
	
	  }, {
	    key: 'minWidth',
	    get: function get() {
	      var minWidth = 0;
	      this.parts.forEach(function (cell) {
	        minWidth = Math.max(minWidth, cell.minWidth);
	      });
	      return minWidth + this.padding;
	    }
	
	    /**
	     * Reference to the parent system of this measure.
	     * - (Getter)
	     * - (Setter) The measure el will be created, and the height of the measure will be set.
	     * @type {SystemLayout}
	     */
	
	  }, {
	    key: 'system',
	    get: function get() {
	      return this._s;
	    },
	    set: function set(system) {
	      this._s = system;
	      this._el = system.el.g().addClass('mus-measure');
	    }
	  }, {
	    key: 'padding',
	    get: function get() {
	      var lo = this.layout.options;
	      return lo.measurePaddingRight + lo.measurePaddingLeft;
	    }
	  }, {
	    key: 'outerWidth',
	    get: function get() {
	      return this.outerWidthLeft + this.outerWidthRight;
	    }
	  }, {
	    key: 'outerWidthLeft',
	    get: function get() {
	      return this.layout.options.measurePaddingLeft + this.barLeftInSystem.width / 2;
	    }
	  }, {
	    key: 'outerWidthRight',
	    get: function get() {
	      return this.layout.options.measurePaddingRight + this.barRightInSystem.width / 2;
	    }
	
	    /**
	     * Width of the measure.
	     * @type {number}
	     */
	
	  }, {
	    key: 'width',
	    get: function get() {
	      return this._w || (this._w = this.minWidth);
	    },
	    set: function set(w) {
	      var _this2 = this;
	
	      this._w = w;
	      this.parts.forEach(function (cell) {
	        cell.width = w - _this2.outerWidth;
	      });
	    }
	  }, {
	    key: 'height',
	    get: function get() {
	      return this.system.height;
	    }
	  }, {
	    key: 'minHeight',
	    get: function get() {
	      var partSep = this.layout.options.partSep;
	
	      var minHeight = 0;
	
	      this.parts.forEach(function (cell) {
	        minHeight += cell.height + partSep;
	      });
	      return minHeight ? minHeight - partSep : 0;
	    }
	
	    /**
	     * The x position of the measure in the system.
	     * - (Getter)
	     * - (Setter) Set x cause the measure element to translate.
	     * @type {number}
	     */
	
	  }, {
	    key: 'x',
	    get: function get() {
	      return this._x;
	    },
	    set: function set(x) {
	      this._x = x;
	      this.el.transform(Snap.matrix().translate(x, 0));
	    }
	
	    /**
	     * If the measure in the beginning of the system.
	     * @type {boolean}
	     * @readonly
	     */
	
	  }, {
	    key: 'inSystemBegin',
	    get: function get() {
	      return this._sIndex === 0;
	    }
	
	    /**
	     * If the measure in the end of the system.
	     * @type {boolean}
	     * @readonly
	     */
	
	  }, {
	    key: 'inSystemEnd',
	    get: function get() {
	      return this._sIndex === this.system.measures.length - 1;
	    }
	
	    /**
	     * Left bar of the measure in system.
	     * @type {musje.Bar}
	     * @readonly
	     */
	
	  }, {
	    key: 'barLeftInSystem',
	    get: function get() {
	      return this.parts[0].barLeftInSystem;
	    }
	
	    /**
	     * Right bar of the measure in system.
	     * @type {Bar}
	     * @readonly
	     */
	
	  }, {
	    key: 'barRightInSystem',
	    get: function get() {
	      return this.parts[0].barRightInSystem;
	    }
	  }]);
	
	  return TimewiseMeasure;
	}();
	
	exports.default = TimewiseMeasure;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _snapsvg = __webpack_require__(8);
	
	var _util = __webpack_require__(2);
	
	var _Layout = __webpack_require__(24);
	
	var _Layout2 = _interopRequireDefault(_Layout);
	
	var _renderBar = __webpack_require__(38);
	
	var _renderBar2 = _interopRequireDefault(_renderBar);
	
	var _renderDuration = __webpack_require__(39);
	
	var _renderDuration2 = _interopRequireDefault(_renderDuration);
	
	var _renderCurve = __webpack_require__(40);
	
	var _renderCurve2 = _interopRequireDefault(_renderCurve);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Renderer = function () {
	  function Renderer(svg, lo) {
	    _classCallCheck(this, Renderer);
	
	    this._lo = (0, _util.extend)(_Layout2.default.options, lo);
	    this.layout = new _Layout2.default(svg, this._lo);
	  }
	
	  _createClass(Renderer, [{
	    key: 'render',
	    value: function render(score) {
	      this._score = score;
	      this.layout.flow(score);
	      this.renderHeader();
	      this.renderContent();
	    }
	  }, {
	    key: 'renderHeader',
	    value: function renderHeader() {
	      var lo = this._lo;
	      var header = this.layout.header;
	      var el = header.el,
	          width = header.width;
	
	
	      el.text(width / 2, lo.titleFontSize, this._score.head.title).attr({
	        fontSize: lo.titleFontSize * 2,
	        fontWeight: lo.titleFontWeight,
	        textAnchor: 'middle'
	      });
	
	      el.text(width, lo.titleFontSize * 1.5, this._score.head.composer).attr({
	        fontSize: lo.composerFontSize,
	        fontWeight: lo.composerFontWeight,
	        textAnchor: 'end'
	      });
	
	      header.height = el.getBBox().height;
	    }
	  }, {
	    key: 'renderContent',
	    value: function renderContent() {
	      var lo = this._lo;
	
	      this.layout.content.systems.forEach(function (system) {
	        var measures = system.measures;
	
	        measures.forEach(function (measure) {
	          (0, _renderBar2.default)(measure, lo);
	          measure.parts.forEach(function (cell) {
	            renderCell(cell, lo);
	          });
	        });
	      });
	    }
	  }]);
	
	  return Renderer;
	}();
	
	function renderNote(note, cell, lo) {
	  note.el = cell.el.g().transform((0, _snapsvg.matrix)().translate(note.x, note.y));
	  note.el.use(note.def.pitchDef.el);
	  (0, _renderDuration2.default)(note, lo);
	}
	
	function renderCell(cell, lo) {
	  cell.data.forEach(function (data) {
	    switch (data.$type) {
	      case 'rest':
	        renderNote(data, cell, lo);
	        break;
	      case 'note':
	        renderNote(data, cell, lo);
	        (0, _renderCurve2.default)('tie', data);
	        (0, _renderCurve2.default)('slur', data);
	        break;
	      case 'time':
	        data.el = cell.el.use(data.def.el).attr({ x: data.x, y: data.y });
	        break;
	      default:
	    }
	  });
	}
	
	exports.default = Renderer;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _layoutOptions = __webpack_require__(25);
	
	var _layoutOptions2 = _interopRequireDefault(_layoutOptions);
	
	var _Defs = __webpack_require__(26);
	
	var _Defs2 = _interopRequireDefault(_Defs);
	
	var _SvgLayout = __webpack_require__(33);
	
	var _SvgLayout2 = _interopRequireDefault(_SvgLayout);
	
	var _BodyLayout = __webpack_require__(34);
	
	var _BodyLayout2 = _interopRequireDefault(_BodyLayout);
	
	var _HeaderLayout = __webpack_require__(35);
	
	var _HeaderLayout2 = _interopRequireDefault(_HeaderLayout);
	
	var _ContentLayout = __webpack_require__(36);
	
	var _ContentLayout2 = _interopRequireDefault(_ContentLayout);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class
	 * @param svg {string}
	 * @param options {Object} Layout options
	 */
	var Layout = function () {
	  function Layout(svg, options) {
	    _classCallCheck(this, Layout);
	
	    this.options = options;
	    this.svg = svg;
	
	    this.svg = new _SvgLayout2.default(this);
	    this.body = new _BodyLayout2.default(this);
	    this.header = new _HeaderLayout2.default(this);
	    this.content = new _ContentLayout2.default(this);
	
	    this.defs = new _Defs2.default(this);
	  }
	
	  /**
	   * @param  {Score} score
	   */
	
	
	  _createClass(Layout, [{
	    key: 'flow',
	    value: function flow(score) {
	      init(this, score);
	      this.content.flow(score.measures);
	    }
	  }]);
	
	  return Layout;
	}();
	
	Layout.options = _layoutOptions2.default;
	
	function init(that, score) {
	  var measures = score.measures;
	
	  measures.forEach(function (measure, m) {
	    measure = measures[m];
	    measure.layout = that;
	    measure.parts.forEach(function (cell) {
	      cell.layout = that;
	      cell.flow();
	    });
	  });
	}
	
	exports.default = Layout;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _util = __webpack_require__(2);
	
	var layoutOptions = {
	  mode: 'block', // inline | block | paper
	  // width: 650,
	  // height: 600,
	  marginTop: 25,
	  marginRight: 30,
	  marginBottom: 25,
	  marginLeft: 30,
	
	  fontSize: 20,
	  fontFamily: 'Helvetica, Arial, Sans Serif',
	
	  titleFontSize: '110%',
	  // titleFontFamily
	  titleFontWeight: 'bold',
	  composerFontSize: '90%',
	  // composerFontFamily:
	  composerFontWeight: 'bold',
	  // composerFontStyle,
	  timeFontSize: '95%',
	  timeFontWeight: 'bold',
	
	  headerSep: '100%',
	  systemSep: '180%',
	  musicDataSep: '20%',
	
	  partHeight: '120%',
	  partSep: '80%',
	
	  measurePaddingLeft: '50%',
	  measurePaddingRight: '50%',
	
	  barlineHeight: '120%',
	  thinBarlineWidth: '4%',
	  thickBarlineWidth: '16%',
	  barlineSep: '18%',
	  barlineDotRadius: '7.5%',
	  barlineDotSep: '22%',
	
	  accidentalFontSize: '95%',
	  accidentalShift: '10%',
	
	  octaveRadius: '6.6%',
	  octaveOffset: '0%',
	  octaveSep: '23%',
	
	  stepBaselineShift: '12%', // for step without lower octave and underline
	
	  typeStrokeWidth: '5%',
	  typebarOffset: '30%', // 1 - - -
	  typebarLength: '55%', // off len sep len sep len (dot) ext
	  typebarSep: '45%', // 1 -
	  typebarExt: '20%', // off len (dot) ext
	  underbarSep: '17%',
	
	  dotOffset: '60%', // for type = 2
	  dotRadius: '6.6%', // 1 - . .
	  dotSep: '60%', // off len dotOff . dotSep . ext
	  t4DotOffset: '30%',
	  t4DotSep: '50%',
	  t4DotExt: '25%',
	  t4DotBaselineShift: '20%'
	};
	
	var fontSize = layoutOptions.fontSize;
	
	
	(0, _util.objEach)(layoutOptions, function (value, key) {
	  if (typeof value !== 'string') return;
	
	  var unit = value.replace(/[\d\.]+/, '');
	  value = +value.replace(/[^\d\.]+/, '');
	
	  switch (unit) {
	    case '%':
	      layoutOptions[key] = fontSize * value / 100;
	      break;
	    case '':
	    // fall through
	    case 'px':
	      layoutOptions[key] = value;
	      break;
	    case 'others to be implemented':
	      break;
	    default:
	  }
	});
	
	exports.default = layoutOptions;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _AccidentalDef = __webpack_require__(27);
	
	var _AccidentalDef2 = _interopRequireDefault(_AccidentalDef);
	
	var _BarDef = __webpack_require__(29);
	
	var _BarDef2 = _interopRequireDefault(_BarDef);
	
	var _DurationDef = __webpack_require__(30);
	
	var _DurationDef2 = _interopRequireDefault(_DurationDef);
	
	var _PitchDef = __webpack_require__(31);
	
	var _PitchDef2 = _interopRequireDefault(_PitchDef);
	
	var _TimeDef = __webpack_require__(32);
	
	var _TimeDef2 = _interopRequireDefault(_TimeDef);
	
	var _Note = __webpack_require__(12);
	
	var _Note2 = _interopRequireDefault(_Note);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class
	 * @param {Layout} layout
	 */
	var Defs = function () {
	  function Defs(layout) {
	    _classCallCheck(this, Defs);
	
	    this._layout = layout;
	  }
	
	  /**
	   * Get the svg def of the music data.
	   * @param  musicData {MusicDataMixin} music data
	   * @return {Def}
	   */
	
	
	  _createClass(Defs, [{
	    key: 'get',
	    value: function get(musicData) {
	      var id = musicData.defId;
	      return this[id] || (this[id] = makeDef(id, musicData, this));
	    }
	  }, {
	    key: 'getAccidental',
	    value: function getAccidental(accidental) {
	      var id = 'a' + accidental.replace(/#/g, 's');
	      return this[id] || (this[id] = new _AccidentalDef2.default(id, accidental, this._layout));
	    }
	  }, {
	    key: '_getPitch',
	    value: function _getPitch(id, note) {
	      return this[id] || (this[id] = new _PitchDef2.default(id, note, this));
	    }
	  }]);
	
	  return Defs;
	}();
	
	function makeDef(id, musicData, defs) {
	  switch (musicData.$type) {
	    case 'bar':
	      return new _BarDef2.default(id, musicData, defs._layout);
	    case 'time':
	      return new _TimeDef2.default(id, musicData, defs._layout);
	    case 'note':
	      return makeNoteDef(musicData, defs);
	    case 'rest':
	      return makeRestDef(musicData, defs);
	    case 'duration':
	      return new _DurationDef2.default(id, musicData, defs._layout);
	    default:
	      return { width: 0, height: 0 };
	  }
	}
	
	function makeNoteDef(note, defs) {
	  var underbar = note.duration.underbar;
	  var pitchId = note.pitch.defId + underbar;
	  var pitchDef = defs._getPitch(pitchId, note);
	  var durationDef = defs.get(note.duration);
	  return {
	    pitchDef: pitchDef,
	    durationDef: durationDef,
	    height: pitchDef.height,
	    width: pitchDef.width + durationDef.width * 1
	    // (underbar ? pitchDef.scale.x : 1)
	  };
	}
	
	function makeRestDef(rest, defs) {
	  var restNote = new _Note2.default({ pitch: { step: 0 }, duration: rest.duration });
	  return makeNoteDef(restNote, defs);
	}
	
	exports.default = Defs;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _snapsvg = __webpack_require__(8);
	
	var _snapsvg2 = _interopRequireDefault(_snapsvg);
	
	var _svgPaths = __webpack_require__(28);
	
	var _svgPaths2 = _interopRequireDefault(_svgPaths);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * SVG definition for accidental.
	 * @class
	 * @param {string} id         [description]
	 * @param {string} accidental [description]
	 * @param {Layout} layout     [description]
	 */
	function AccidentalDef(id, accidental, layout) {
	  var _layout$options = layout.options,
	      accidentalShift = _layout$options.accidentalShift,
	      accidentalFontSize = _layout$options.accidentalFontSize;
	
	  var el = this.el = layout.svg.el.g().attr('id', id);
	  var accKey = accidental.replace(/bb/, 'b'); // double flat to be synthesized
	  var pathData = _svgPaths2.default[accKey];
	  var ratio = _svgPaths2.default.ACCIDENTAL_RATIOS[accKey];
	  var shift = _svgPaths2.default.ACCIDENTAL_SHIFTS[accKey];
	  var path = el.path(pathData);
	  var bb = el.getBBox();
	
	  path.transform(_snapsvg2.default.matrix().translate(0.1 * accidentalShift, -accidentalShift).scale(ratio * accidentalFontSize).translate(-bb.x, shift - bb.y2));
	
	  // Combine two flat to be double flat.
	  if (accidental === 'bb') {
	    el.use(path).attr('x', accidentalFontSize * 0.24);
	    el.transform('scale(0.9,1)');
	  }
	
	  bb = el.getBBox();
	  this.width = bb.width * 1.2;
	
	  el.toDefs();
	}
	
	exports.default = AccidentalDef;

/***/ },
/* 28 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var svgPaths = {
	  // https://upload.wikimedia.org/wikipedia/commons/a/a6/Sharp.svg
	  '#': 'M6.102,7.457V2.753L8.102,2.201V6.881L6.102,7.457zM10.04,6.319L8.665,6.713V2.033L10.04,1.649V-0.295L8.665,0.089V-4.69277H8.102V0.234L6.102,0.809V-3.84077H5.571V0.986L4.196,1.371V3.319L5.571,2.935V7.606L4.196,7.989V9.929L5.571,9.545V14.299L6.102,14.29977V9.375L8.102,8.825V13.45077H8.665V8.651L10.04,8.266V6.319z',
	
	  // https://upload.wikimedia.org/wikipedia/commons/3/3a/DoubleSharp.svg
	  '##': 'M5.009,8.30721C4.27443,8.19192 3.52769,8.19209 2.7858,8.19294C2.77007,7.65011 2.85674,7.0729 2.6415,6.56343C2.49821,6.22426 2.22532,5.95665 1.98269,5.68155C1.59552,6.0278 1.27751,6.48475 1.24704,7.01638C1.21706,7.40767 1.23902,7.80085 1.2322,8.19294C0.4904,8.20416-0.25918,8.16828-0.991,8.314C-0.84988,7.5863-0.88195,6.84171-0.86917,6.1048C-0.3043,6.08953 0.30023,6.17101 0.82484,5.92526C1.13441,5.78023 1.39653,5.55295 1.6591,5.33676C1.3173,4.94965 0.87346,4.60861 0.33665,4.57651C-0.06427,4.54485-0.46734,4.56793-0.86917,4.56097C-0.89434,3.82949-0.80895,3.08855-0.96079,2.3663C-0.23733,2.49697 0.50065,2.46343 1.2322,2.47284C1.24306,2.99383 1.18483,3.53381 1.33191,4.0355C1.44414,4.41838 1.74978,4.71293 2.0051,5.01521C2.36553,4.70111 2.69057,4.30706 2.75011,3.81412C2.804,3.36793 2.76123,2.91977 2.7858,2.47284C3.52263,2.45348 4.28215,2.54713 4.99535,2.314C4.88891,3.05711 4.87889,3.81152 4.88717,4.56097C4.36127,4.57582 3.80954,4.51747 3.30955,4.69457C2.92975,4.8291 2.63114,5.12341 2.32869,5.38325C2.65661,5.71867 3.0516,6.02802 3.5403,6.07368C3.98834,6.11554 4.43829,6.09658 4.88717,6.1048C4.89828,6.83958 4.86193,7.5825 5.009,8.30721z',
	
	  // https://upload.wikimedia.org/wikipedia/commons/b/ba/Flat.svg
	  b: 'M8.166,3.657C8.166,4.232 7.950425,4.78273 7.359,5.52188C6.732435,6.30494 6.205,6.75313 5.51,7.28013V3.848C5.668,3.449 5.901,3.126 6.21,2.878C6.518,2.631 6.83,2.507 7.146,2.507C7.668,2.507 7.999,2.803 8.142,3.393C8.158,3.441 8.166,3.529 8.166,3.657zM8.091,1.257C7.66,1.257 7.222,1.376 6.776,1.615C6.33,1.853 5.908,2.172 5.51,2.569V-4.70267H4.947 V7.75213C4.947,8.10413 5.043,8.28013 5.235,8.28013C5.346,8.28013 5.483913,8.18713 5.69,8.06413C6.27334,7.71598 6.636935,7.48332 7.032,7.23788C7.482617,6.95792 7.99,6.631 8.661,5.991C9.124,5.526 9.459,5.057 9.667,4.585C9.874,4.112 9.978,3.644 9.978,3.179C9.978,2.491 9.795,2.002 9.429,1.713C9.015,1.409 8.568,1.257 8.091,1.257z',
	
	  // https://upload.wikimedia.org/wikipedia/commons/f/f4/Music-natural.svg
	  n: 'M 0,14.112V41.52h-1.248V31.248l-6.672,1.728V5.232h1.2v10.704l6.72,-1.824zm-6.72,6.432v7.536l5.472,-1.44v-7.536l-5.472,1.44z',
	
	  ACCIDENTAL_RATIOS: { '#': 0.043, 'n': 0.023, '##': 0.062, b: 0.057 },
	  ACCIDENTAL_SHIFTS: { '#': 1, 'n': 2, '##': -4, b: 0 }
	};
	
	exports.default = svgPaths;

/***/ },
/* 29 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * SVG definition for barline.
	 * @class
	 * @param {string} id     [description]
	 * @param {Bar} bar    [description]
	 * @param {Layout} layout [description]
	 */
	function BarDef(id, bar, layout) {
	  var _layout$options = layout.options,
	      thinBarlineWidth = _layout$options.thinBarlineWidth,
	      thickBarlineWidth = _layout$options.thickBarlineWidth,
	      barlineSep = _layout$options.barlineSep,
	      barlineDotSep = _layout$options.barlineDotSep,
	      barlineDotRadius = _layout$options.barlineDotRadius;
	
	  var x = 0;
	  var lineWidth = void 0;
	  this.el = layout.svg.el.g().attr('id', id).toDefs();
	
	  switch (bar.value) {
	    case 'single':
	      lineWidth = thinBarlineWidth;
	      addBarline(this, x, lineWidth);
	      x += lineWidth;
	      break;
	    case 'double':
	      lineWidth = thinBarlineWidth;
	      addBarline(this, x, lineWidth);
	      x += lineWidth + barlineSep;
	      addBarline(this, x, lineWidth);
	      x += lineWidth;
	      break;
	    case 'end':
	      lineWidth = thinBarlineWidth;
	      addBarline(this, x, lineWidth);
	      x += lineWidth + barlineSep;
	      lineWidth = thickBarlineWidth;
	      addBarline(this, x, lineWidth);
	      x += lineWidth;
	      break;
	    case 'repeat-begin':
	      lineWidth = thickBarlineWidth;
	      addBarline(this, x, lineWidth);
	      x += lineWidth + barlineSep;
	      lineWidth = thinBarlineWidth;
	      addBarline(this, x, lineWidth);
	      x += lineWidth + barlineDotSep + barlineDotRadius;
	      break;
	    case 'repeat-end':
	      x = barlineDotSep + barlineDotRadius;
	      lineWidth = thinBarlineWidth;
	      addBarline(this, x, lineWidth);
	      x += lineWidth + barlineSep;
	      lineWidth = thickBarlineWidth;
	      addBarline(this, x, lineWidth);
	      x += lineWidth;
	      break;
	    case 'repeat-both':
	      x = barlineDotSep + barlineDotRadius;
	      lineWidth = thinBarlineWidth;
	      addBarline(this, x, lineWidth);
	      x += lineWidth + barlineSep;
	      lineWidth = thickBarlineWidth;
	      addBarline(this, x, lineWidth);
	      x += lineWidth + barlineSep;
	      lineWidth = thinBarlineWidth;
	      addBarline(this, x, lineWidth);
	      x += lineWidth + barlineDotSep + barlineDotRadius;
	      break;
	    default:
	  }
	  this.width = x;
	}
	
	function addBarline(that, x, width) {
	  that.el.rect(x, 0, width, 1);
	}
	
	exports.default = BarDef;

/***/ },
/* 30 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * SVG definition for duration.
	 * @class
	 * @param {string} id       [description]
	 * @param {Duration} duration [description]
	 * @param {Layout} layout   [description]
	 */
	function DurationDef(id, duration, layout) {
	  this._id = id;
	  this._layout = layout;
	
	  // only make def el for:
	  // id = d10, d11, d12, d20, d21, d20, d41, d40
	  switch (duration.type) {
	    case 1:
	      // whole note
	      makeEl(this);
	      makeType1(this, id, duration.dot);
	      break;
	    case 2:
	      // half note
	      makeEl(this);
	      makeType2(this, id, duration.dot);
	      break;
	    default:
	      // other note types type quarter note def
	      if (duration.dot === 0) {
	        this.width = 0;
	      } else {
	        makeEl(this);
	        makeType4(this, id, duration.dot);
	      }
	  }
	}
	
	function makeType1(that, id, dot) {
	  var _that$_layout$options = that._layout.options,
	      typebarLength = _that$_layout$options.typebarLength,
	      typebarSep = _that$_layout$options.typebarSep,
	      typebarOffset = _that$_layout$options.typebarOffset;
	
	  var x = typebarOffset;
	
	  addLine(that, x);
	  x += typebarLength + typebarSep;
	  addLine(that, x);
	  x += typebarLength + typebarSep;
	  addLine(that, x);
	  x += typebarLength;
	
	  that.width = addDot(that, x, dot, 1);
	}
	
	function makeType2(that, id, dot) {
	  var _that$_layout$options2 = that._layout.options,
	      typebarOffset = _that$_layout$options2.typebarOffset,
	      typebarLength = _that$_layout$options2.typebarLength;
	
	  var x = typebarOffset;
	
	  addLine(that, typebarOffset);
	  x += typebarLength;
	  that.width = addDot(that, x, dot, 2);
	}
	
	function makeType4(that, id, dot) {
	  var _that$_layout$options3 = that._layout.options,
	      t4DotOffset = _that$_layout$options3.t4DotOffset,
	      t4DotBaselineShift = _that$_layout$options3.t4DotBaselineShift,
	      t4DotSep = _that$_layout$options3.t4DotSep,
	      t4DotExt = _that$_layout$options3.t4DotExt,
	      dotRadius = _that$_layout$options3.dotRadius;
	
	  var x = t4DotOffset;
	
	  that.el.circle(x, -t4DotBaselineShift, dotRadius);
	
	  if (dot > 1) {
	    x += t4DotSep;
	    that.el.circle(x, -t4DotBaselineShift, dotRadius);
	  }
	  that.width = x + t4DotExt;
	}
	
	function makeEl(that) {
	  that.el = that._layout.svg.el.g().attr('id', that._id).toDefs();
	}
	
	function addLine(that, x) {
	  var _that$_layout$options4 = that._layout.options,
	      typeStrokeWidth = _that$_layout$options4.typeStrokeWidth,
	      typebarLength = _that$_layout$options4.typebarLength;
	
	  that.el.rect(x, -typeStrokeWidth, typebarLength, typeStrokeWidth);
	}
	
	// Add dot for type 1 (whole) or type 2 (half) note.
	function addDot(that, x, dot, type) {
	  var _that$_layout$options5 = that._layout.options,
	      dotOffset = _that$_layout$options5.dotOffset,
	      dotSep = _that$_layout$options5.dotSep,
	      dotRadius = _that$_layout$options5.dotRadius,
	      typebarExt = _that$_layout$options5.typebarExt;
	
	
	  if (dot > 0) {
	    x += dotOffset * (type === 1 ? 1.2 : 1);
	    that.el.circle(x, 0, dotRadius);
	  }
	  if (dot > 1) {
	    x += dotSep * (type === 1 ? 1.2 : 1);
	    that.el.circle(x, 0, dotRadius);
	  }
	  return x + typebarExt;
	}
	
	exports.default = DurationDef;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _snapsvg = __webpack_require__(8);
	
	var _snapsvg2 = _interopRequireDefault(_snapsvg);
	
	var _util = __webpack_require__(2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * SVG definition for pitch.
	 * The `PitchDef` is defined by properties: a s o u
	 * accidental step octave underbar
	 * @class
	 * @param id {string}     [description]
	 * @param pitch {Pitch}   [description]
	 * @param layout {Layout} [description]
	 */
	function PitchDef(id, note, defs) {
	  var layout = this._layout = defs._layout;
	  var _note$pitch = note.pitch,
	      accidental = _note$pitch.accidental,
	      octave = _note$pitch.octave;
	  // const scale = getScale(accidental, octave, underbar)
	
	  var el = this.el = layout.svg.el.g().attr({
	    id: id,
	    stroke: 'black',
	    strokeWidth: 0.1
	  });
	  var matrix = void 0,
	      sbbox = void 0,
	      pbbox = void 0;
	
	  this._defs = defs;
	  addAccidental(this, accidental);
	  addStep(this, note.pitch.step);
	  addOctave(this, octave, note.duration.underbar);
	
	  matrix = getMatrix(this, octave);
	  el.transform(matrix);
	
	  // 此处的_sbbox就是加了step的bounding box，是addStep和addOctave创建和修改的
	  sbbox = this._sbbox;
	  sbbox = getBBoxAfterTransform(this.el, sbbox, matrix);
	
	  pbbox = el.getBBox();
	  el.toDefs();
	
	  (0, _util.extend)(this, {
	    matrix: matrix,
	    width: pbbox.width,
	    height: -pbbox.y,
	    stepCx: sbbox.cx,
	    stepY: sbbox.y,
	    stepCy: sbbox.cy,
	    stepY2: sbbox.y2,
	    stepTop: octave > 0 ? pbbox.y : sbbox.y + layout.options.fontSize * 0.2
	  });
	}
	
	function addAccidental(that, accidental) {
	  if (!accidental) {
	    that._accidentalX2 = 0;
	    return;
	  }
	  var accDef = that._defs.getAccidental(accidental);
	  that.el.use(accDef.el).attr('y', -that._layout.options.accidentalShift);
	  that._accidentalX2 = accDef.width;
	}
	
	// step在这里就是音阶的数字
	function addStep(that, step) {
	  that._sbbox = that.el.text(that._accidentalX2, 0, '' + step).attr('font-size', that._layout.options.fontSize).getBBox();
	}
	
	function addOctave(that, octave, underbar) {
	  if (!octave) return;
	
	  var _that$_layout$options = that._layout.options,
	      octaveRadius = _that$_layout$options.octaveRadius,
	      octaveOffset = _that$_layout$options.octaveOffset,
	      octaveSep = _that$_layout$options.octaveSep;
	
	  var octaveEl = that.el.g();
	
	  // 加上八度和音的点
	  if (octave > 0) {
	    for (var i = 0; i < octave; i++) {
	      octaveEl.circle(that._sbbox.cx, that._sbbox.y + octaveOffset - octaveSep * i, octaveRadius);
	    }
	  } else {
	
	    for (var _i = 0; _i > octave; _i--) {
	      octaveEl.circle(that._sbbox.cx, that._sbbox.y2 - octaveOffset - octaveSep * _i - underbar ? underbar * that._layout.options.underbarSep : 0, octaveRadius);
	    }
	  }
	  that.el.add(octaveEl);
	}
	
	// Transform the pitch to be in a good baseline position and
	// scale it to be more square.
	function getMatrix(that, octave) {
	  var _that$_layout$options2 = that._layout.options,
	      stepBaselineShift = _that$_layout$options2.stepBaselineShift,
	      underbarSep = _that$_layout$options2.underbarSep;
	
	  var pbbox = that.el.getBBox();
	
	  // 关键：如果octave大于等于0，同时下面也没有线，dy就是-stepBaselineShift, 否则
	  // 就是0，还要加上underBar * underBarSep
	  // const dy = (octave >= 0 && underbar === 0 ? -stepBaselineShift : 0) -
	  //                         underbar * underbarSep
	  return _snapsvg2.default.matrix();
	  // .translate(-pbbox.x, 0)
	  // .translate(0, near(pbbox.y2, that._sbbox.y2) ? 0 : -pbbox.y2)
	}
	
	// 将bounding box平移到合适位置
	function getBBoxAfterTransform(container, bbox, matrix) {
	  var rect = container.rect(bbox.x, bbox.y, bbox.width, bbox.height);
	  var g = container.g(rect);
	  rect.transform(matrix);
	  bbox = g.getBBox();
	  g.remove();
	  return bbox;
	}
	
	function getScale(hasAccidental, octave, underbar) {
	  var absOctave = Math.abs(octave);
	  return {
	    x: Math.pow(0.97, absOctave + underbar + (hasAccidental ? 2 : 0)),
	    y: Math.pow(0.95, absOctave + underbar + (hasAccidental ? 1 : 0))
	  };
	}
	
	exports.default = PitchDef;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _snapsvg = __webpack_require__(8);
	
	var _snapsvg2 = _interopRequireDefault(_snapsvg);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * SVG definition for time signature.
	 * @class
	 * @param {string} id     [description]
	 * @param {Time} time   [description]
	 * @param {Layout} layout [description]
	 */
	function TimeDef(id, time, layout) {
	  var _layout$options = layout.options,
	      fontSize = _layout$options.timeFontSize,
	      fontWeight = _layout$options.timeFontWeight;
	
	  var lineExtend = fontSize * 0.1;
	  var el = this.el = layout.svg.el.g().attr({
	    id: id,
	    fontSize: fontSize,
	    fontWeight: fontWeight,
	    textAnchor: 'middle'
	  });
	  var lineY = -0.85 * fontSize;
	  var bb = void 0;
	
	  el.text(0, -1 * fontSize, time.beats);
	  el.text(0, 0, time.beatType); // baseline y = 0
	  bb = el.getBBox();
	  el.line(bb.x - lineExtend, lineY, bb.x2 + lineExtend, lineY);
	  el.transform(_snapsvg2.default.matrix().scale(1, 0.8).translate(lineExtend - bb.x, 0));
	
	  bb = el.getBBox();
	  el.toDefs();
	
	  this.width = bb.width;
	  this.height = -bb.y;
	}
	
	exports.default = TimeDef;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _snapsvg = __webpack_require__(8);
	
	var _snapsvg2 = _interopRequireDefault(_snapsvg);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class
	 * @param layout {Layout}
	 */
	var SvgLayout = function () {
	  function SvgLayout(layout) {
	    _classCallCheck(this, SvgLayout);
	
	    this._layout = layout;
	    var _layout$options = layout.options,
	        fontFamily = _layout$options.fontFamily,
	        width = _layout$options.width;
	
	    this._el = (0, _snapsvg2.default)(layout.svg).attr({ fontFamily: fontFamily }).addClass('musje');
	    this.el.clear();
	    this.width = width;
	  }
	
	  _createClass(SvgLayout, [{
	    key: 'el',
	    get: function get() {
	      return this._el;
	    }
	
	    /**
	     * Width of the svg.
	     * @type {number}
	     */
	
	  }, {
	    key: 'width',
	    get: function get() {
	      return this._w;
	    },
	    set: function set(w) {
	      this._w = w;
	      this.el.attr('width', w);
	      var body = this._layout.body;
	
	      if (body) body.width = w;
	    }
	
	    /**
	     * Height of the svg.
	     * @type {number}
	     */
	
	  }, {
	    key: 'height',
	    get: function get() {
	      return this._h;
	    },
	    set: function set(h) {
	      this._h = h;
	      this.el.attr('height', h);
	    }
	  }]);
	
	  return SvgLayout;
	}();
	
	exports.default = SvgLayout;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _snapsvg = __webpack_require__(8);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Body
	 * @class
	 * @param {Layout} layout
	 */
	var BodyLayout = function () {
	  function BodyLayout(layout) {
	    _classCallCheck(this, BodyLayout);
	
	    this._layout = layout;
	    var svg = layout.svg,
	        options = layout.options;
	    var marginTop = options.marginTop,
	        marginRight = options.marginRight,
	        marginLeft = options.marginLeft,
	        width = options.width;
	
	    this._el = svg.el.g().transform((0, _snapsvg.matrix)().translate(marginLeft, marginTop)).addClass('mus-body');
	    this.width = width - marginLeft - marginRight;
	  }
	
	  _createClass(BodyLayout, [{
	    key: 'el',
	    get: function get() {
	      return this._el;
	    }
	
	    /**
	     * Width of the body.
	     * - (Getter) Get the body width.
	     * - (Setter) Set the body width and this also induces setting the
	     * header and content width if one exists.
	     * @type {number}
	     */
	
	  }, {
	    key: 'width',
	    get: function get() {
	      return this._w;
	    },
	    set: function set(w) {
	      this._w = w;
	      var layout = this._layout;
	      if (layout.header) layout.header.width = w;
	      if (layout.content) layout.content.width = w;
	    }
	
	    /**
	     * Height of the body.
	     * - (Getter) Get the body height.
	     * - (Setter) Set the body height and this will also cause the height of svg to vary.
	     * @type {number}
	     */
	
	  }, {
	    key: 'height',
	    get: function get() {
	      return this._h;
	    },
	    set: function set(h) {
	      var layout = this._layout;
	      var _layout$options = layout.options,
	          marginTop = _layout$options.marginTop,
	          marginBottom = _layout$options.marginBottom;
	
	      layout.svg.height = h + marginTop + marginBottom;
	      this._h = h;
	    }
	  }]);
	
	  return BodyLayout;
	}();
	
	exports.default = BodyLayout;

/***/ },
/* 35 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Header layout.
	 * @param {Layout} layout
	 */
	var HeaderLayout = function () {
	  function HeaderLayout(layout) {
	    _classCallCheck(this, HeaderLayout);
	
	    this._layout = layout;
	    this.el = layout.body.el.g().addClass('mus-header');
	    this.width = layout.body.width;
	  }
	
	  /**
	   * Width of the header.
	   * @type {number}
	   */
	
	
	  _createClass(HeaderLayout, [{
	    key: 'width',
	    get: function get() {
	      return this._w;
	    },
	    set: function set(w) {
	      this._w = w;
	    }
	
	    /**
	     * Height of the header.
	     * @type {number}
	     */
	
	  }, {
	    key: 'height',
	    get: function get() {
	      return this._h;
	    },
	    set: function set(h) {
	      this._h = h;
	      var _layout = this._layout,
	          content = _layout.content,
	          options = _layout.options;
	
	      content.y = h ? h + options.headerSep : 0;
	    }
	  }]);
	
	  return HeaderLayout;
	}();
	
	exports.default = HeaderLayout;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _snapsvg = __webpack_require__(8);
	
	var _SystemLayout = __webpack_require__(37);
	
	var _SystemLayout2 = _interopRequireDefault(_SystemLayout);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class
	 * @param {Object} layout - Reference to the parent layout instance.
	 */
	var ContentLayout = function () {
	  function ContentLayout(layout) {
	    _classCallCheck(this, ContentLayout);
	
	    this.layout = layout;
	    this.el = layout.body.el.g().addClass('mus-content');
	    this.width = layout.body.width;
	  }
	
	  _createClass(ContentLayout, [{
	    key: 'flow',
	
	
	    /**
	     * @param scoreMeasure {musje.TimewiseMeasures} The timewise score measure.
	     */
	    value: function flow(scoreMeasures) {
	      makeSystems(this, scoreMeasures);
	      balanceSystems(this);
	      this.systems.forEach(function (system) {
	        system.flow();
	      });
	    }
	  }, {
	    key: 'y',
	    get: function get() {
	      return this._y;
	    },
	    set: function set(y) {
	      this._y = y;
	      this.el.transform((0, _snapsvg.matrix)().translate(0, y));
	      resizeBody(this);
	    }
	  }, {
	    key: 'width',
	    get: function get() {
	      return this._w;
	    },
	    set: function set(w) {
	      this._w = w;
	    }
	  }, {
	    key: 'height',
	    get: function get() {
	      var last = this.systems[this.systems.length - 1];
	      return last ? last.y + last.height : 0;
	    }
	  }]);
	
	  return ContentLayout;
	}();
	
	function resizeBody(that) {
	  var layout = that.layout;
	  var hHeight = layout.header.height;
	
	  layout.body.height = that.height + (hHeight ? hHeight + layout.options.headerSep : 0);
	}
	
	/**
	 * Divide measures in timewise score into the systems.
	 * @param scoreMeasure {musje.TimewiseMeasures} The timewise score measure.
	 */
	function makeSystems(that, scoreMeasures) {
	  var layout = that.layout;
	  var _layout$options = layout.options,
	      measurePaddingRight = _layout$options.measurePaddingRight,
	      measurePaddingLeft = _layout$options.measurePaddingLeft;
	
	  var measurePadding = measurePaddingLeft + measurePaddingRight;
	  var systems = that.systems = [];
	  var system = new _SystemLayout2.default(layout, 0);
	  systems.push(system);
	
	  scoreMeasures.forEach(function (measure) {
	    var minWidth = measure.minWidth + measurePadding + (measure.barLeftInSystem.width + measure.barRightInSystem.width) / 2;
	
	    // Continue put this measure in the system.
	    if (system.minWidth + minWidth < that.width) {
	      system.measures.push(measure);
	
	      // New system
	    } else {
	      system = new _SystemLayout2.default(layout, systems.length);
	      systems.push(system);
	      system.measures.push(measure);
	    }
	  });
	}
	
	function getMaxLengthSystem(that) {
	  var maxLength = 0;
	  var system = void 0;
	
	  that.systems.forEach(function (system) {
	    maxLength = Math.max(maxLength, system.measures.length);
	  });
	
	  // Find the first max length system backward.
	  for (var i = that.systems.length - 1; i >= 0; i--) {
	    system = that.systems[i];
	    if (system.measures.length === maxLength) return system;
	  }
	}
	
	function isNotBalancable(that) {
	  var systems = that.systems,
	      width = that.width;
	  var length = systems.length;
	
	  return length === 1 || // only 1 system
	  length === 2 && systems[1].minWidth < width * 0.4; // 1 2/5 systems
	}
	
	function balanceSystems(that) {
	  if (isNotBalancable(that)) return;
	
	  var systems = that.systems;
	
	  var last = systems[systems.length - 1];
	  var system = getMaxLengthSystem(that);
	  var next = void 0,
	      prev = void 0;
	
	  // Move measures down to balance the last system.
	  while (last.measures.length < system.measures.length - 1) {
	
	    // Move a measure tail-to-head downward to the last measure.
	    while (true) {
	      next = system.next;
	      if (!next) break;
	      next.measures.unshift(system.measures.pop());
	      system = next;
	    }
	    system = getMaxLengthSystem(that);
	  }
	
	  // Move back measures if the system exceeds the content width.
	  system = last;
	  while (system) {
	    prev = system.prev;
	    while (system.minWidth > that.width) {
	      prev.measures.push(system.measures.shift());
	    }
	    system = prev;
	  }
	}
	
	exports.default = ContentLayout;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _snapsvg = __webpack_require__(8);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @class
	 * @param {number} index
	 * @param {Layout} layout
	 */
	var SystemLayout = function () {
	  function SystemLayout(layout, index) {
	    _classCallCheck(this, SystemLayout);
	
	    this._index = index;
	    this._layout = layout;
	    this._el = layout.content.el.g().addClass('mus-system');
	  }
	
	  _createClass(SystemLayout, [{
	    key: 'flow',
	    value: function flow() {
	      var _this = this;
	
	      var minHeight = 0;
	      var x = 0;
	
	      tuneMeasuresWidths(this);
	
	      this.measures.forEach(function (measure, m) {
	        measure.system = _this;
	        measure._sIndex = m;
	        measure.flow();
	        measure.x = x;
	        x += measure.width;
	        minHeight = Math.max(minHeight, measure.minHeight);
	      });
	
	      var prev = this.prev;
	
	      this.y = prev ? prev.y + prev.height + this._layout.options.systemSep : 0;
	      this.height = minHeight;
	    }
	  }, {
	    key: 'el',
	    get: function get() {
	      return this._el;
	    }
	
	    /**
	     * Measures in a system.
	     * @type {Array.<TimewiseMeasure>}
	     * @readonly
	     */
	
	  }, {
	    key: 'measures',
	    get: function get() {
	      return this._measures || (this._measures = []);
	    }
	
	    /**
	     * Previous system.
	     * @type {SystemLayout}
	     */
	
	  }, {
	    key: 'prev',
	    get: function get() {
	      return this._layout.content.systems[this._index - 1];
	    }
	
	    /**
	     * Next system.
	     * @type {SystemLayout}
	     */
	
	  }, {
	    key: 'next',
	    get: function get() {
	      return this._layout.content.systems[this._index + 1];
	    }
	  }, {
	    key: 'y',
	    get: function get() {
	      return this._y;
	    },
	    set: function set(y) {
	      this._y = y;
	      this.el.transform((0, _snapsvg.matrix)().translate(0, y));
	    }
	  }, {
	    key: 'width',
	    get: function get() {
	      return this._layout.content.width;
	    }
	  }, {
	    key: 'minWidth',
	    get: function get() {
	      var min = 0;
	      this.measures.forEach(function (measure) {
	        min += measure.minWidth;
	      });
	      return min;
	    }
	  }, {
	    key: 'content',
	    get: function get() {
	      return this._layout.content;
	    }
	  }, {
	    key: 'systems',
	    get: function get() {
	      return this.content.systems;
	    }
	  }]);
	
	  return SystemLayout;
	}();
	
	function tuneMeasuresWidths(that) {
	  if (!isTunable(that)) return;
	
	  var pairs = getPairs(that.measures);
	  var length = pairs.length;
	  var widthLeft = that.width;
	  var itemLeft = length;
	  var i = 0; // i + itemLeft === length
	  var width;
	
	  while (i < length) {
	    if (widthLeft >= pairs[i].width * itemLeft) {
	      width = widthLeft / itemLeft;
	      do {
	        pairs[i].measure.width = width;
	        i++;
	      } while (i < length);
	      break;
	    } else {
	      width = pairs[i].width;
	      pairs[i].measure.width = width;
	      widthLeft -= width;
	      i++;
	      itemLeft--;
	    }
	  }
	}
	
	function isTunable(that) {
	  var ctWidth = that.content.width;
	  var s = that._index;
	  var ssLen = that.systems.length;
	  return ssLen > 2 || ssLen === 1 && that.minWidth > ctWidth * 0.7 || ssLen === 2 && (s === 0 || s === 1 && that.minWidth > ctWidth * 0.4);
	}
	
	var descendingSort = function descendingSort(a, b) {
	  return b.width - a.width;
	};
	
	var getPairs = function getPairs(measures) {
	  return measures.map(function (measure) {
	    return {
	      width: measure.minWidth,
	      measure: measure
	    };
	  }).sort(descendingSort);
	};
	
	exports.default = SystemLayout;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = renderBar;
	
	var _snapsvg = __webpack_require__(8);
	
	function renderDots(el, x, radius, measureHeight) {
	  var cy = measureHeight / 2;
	  var dy = measureHeight * 0.15;
	
	  el.circle(x, cy - dy, radius);
	  el.circle(x, cy + dy, radius);
	}
	
	function render(bar, measure, lo) {
	  var barlineDotRadius = lo.barlineDotRadius;
	  var height = measure.height;
	
	  var el = measure.el.g().addClass('mus-barline');
	  el.use(bar.def.el).transform((0, _snapsvg.matrix)().scale(1, height));
	
	  switch (bar.value) {
	    case 'repeat-begin':
	      renderDots(el, bar.width - barlineDotRadius, barlineDotRadius, height);
	      break;
	    case 'repeat-end':
	      renderDots(el, barlineDotRadius, barlineDotRadius, height);
	      break;
	    case 'repeat-both':
	      renderDots(el, bar.width - barlineDotRadius, barlineDotRadius, height);
	      renderDots(el, barlineDotRadius, barlineDotRadius, height);
	      break;
	    default:
	  }
	
	  return el;
	}
	
	var translate = function translate(el, x) {
	  el.transform((0, _snapsvg.matrix)().translate(x, 0));
	};
	
	// @param m {number} Measure index in measures.
	// @param len {number} Length of measures.
	function renderBar(measure, lo) {
	  var bar = measure.barRightInSystem;
	  var el = void 0;
	
	  if (bar.def) {
	    el = render(bar, measure, lo);
	
	    // Align end in system end.
	    if (measure.inSystemEnd) translate(el, measure.width - bar.width);
	    // Others align middle.
	    else translate(el, measure.width - bar.width / 2);
	  }
	
	  // Render right bar and align begin in system begin.
	  if (measure.inSystemBegin) {
	    bar = measure.barLeftInSystem;
	    if (bar.def) render(bar, measure, lo);
	  }
	}

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _snapsvg = __webpack_require__(8);
	
	function renderDuration(note, lo) {
	  var _note$def = note.def,
	      durationDef = _note$def.durationDef,
	      pitchDef = _note$def.pitchDef;
	  var underbar = note.duration.underbar;
	
	  var y = 0;
	
	  // Whole and half notes
	  if (note.duration.type < 4) {
	    note.el.use(durationDef.el).attr({
	      x: pitchDef.width,
	      y: pitchDef.stepCy
	    });
	
	    // Quarter or shorter notes
	  } else {
	
	    // Add underbars for eigth or shorter notes
	    if (underbar) {
	      for (var i = 0; i < underbar; i++) {
	
	        // Only render beam for the begin one.
	        if (note.beams[i]) {
	          if (note.beams[i].value === 'begin') {
	
	            // render the bar from the beginning note to the ending note associated
	            // with the beginning note. Y stands for the starting height.
	            renderUnderbar(note, note.beams[i].endDurable, y, lo);
	          }
	
	          // Unbeamed underbar
	        } else {
	          //renders single note
	          renderUnderbar(note, note, y, lo);
	        }
	        y -= lo.underbarSep;
	      }
	    }
	
	    // Add dots
	    if (note.duration.dot) {
	      note.el.g().transform((0, _snapsvg.matrix)().translate(pitchDef.width, 0)).use(durationDef.el).transform(pitchDef.matrix);
	    }
	  }
	}
	
	function renderUnderbar(note1, note2, y, lo) {
	  note1.el.line(0, y, note2.x - note1.x + note2.width, y).attr('stroke-width', lo.typeStrokeWidth);
	}
	
	exports.default = renderDuration;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = renderCurve;
	
	var _snapsvg = __webpack_require__(8);
	
	function getCurvePath(x1, y1, x2, y2) {
	  var dx = x2 - x1;
	  var dy = y2 - y1;
	  var c1x = 0; //-0.1 * dx
	  var c1y = 0; //-0.1 * dy
	  var c2x = dx; //1.1 * dx
	  var c2y = dy; //1.1 * dy
	
	  return (0, _snapsvg.format)('M{x1},{y1}c{c1x},{c1y} {c2x},{c2y} {dx},{dy}c{c3x},{c3y} {c4x},{c4y} {negDx},{negDy}', {
	    x1: x1,
	    y1: y1,
	    c1x: c1x,
	    c1y: c1y - 8,
	    c2x: c2x,
	    c2y: c2y - 8,
	    dx: dx,
	    dy: dy,
	    c3x: -c1x,
	    c3y: -c1y - 10,
	    c4x: -c2x,
	    c4y: -c2y - 10,
	    negDx: -dx,
	    negDy: -dy
	  });
	}
	
	function renderEndCurve(note, error) {
	  var _note$def$pitchDef = note.def.pitchDef,
	      x1 = _note$def$pitchDef.stepCx,
	      y1 = _note$def$pitchDef.stepTop;
	
	  var x2 = -note.systemX - 3;
	  var el = note.el.path(getCurvePath(x1, y1, x2, y1 - 3));
	
	  if (error) el.addClass('mus-error');
	  return el;
	}
	
	function renderBeginCurve(note, error) {
	  var _note$def$pitchDef2 = note.def.pitchDef,
	      x1 = _note$def$pitchDef2.stepCx,
	      y1 = _note$def$pitchDef2.stepTop;
	
	  var x2 = note.system.width - note.systemX + 3;
	  var el = note.el.path(getCurvePath(x1, y1, x2, y1 - 3));
	
	  if (error) el.addClass('mus-error');
	  return el;
	}
	
	function renderCompleteCurve(note1, note2, error) {
	  var _note1$def$pitchDef = note1.def.pitchDef,
	      x1 = _note1$def$pitchDef.stepCx,
	      y1 = _note1$def$pitchDef.stepTop;
	  var _note2$def$pitchDef = note2.def.pitchDef,
	      x2 = _note2$def$pitchDef.stepCx,
	      y2 = _note2$def$pitchDef.stepTop;
	
	  var noteDx = note2.systemX - note1.systemX;
	  var el = note1.el.path(getCurvePath(x1, y1, noteDx + x2, y2));
	
	  if (error) el.addClass('mus-error');
	  return el;
	}
	
	function renderCurve(type, note) {
	  if (note[type].end) {
	    var prev = note[type].prevParent;
	    var prevHasError = note[type].prevHasError;
	
	
	    if (!prev || prev.system !== note.system) renderEndCurve(note, prevHasError);else if (prevHasError) renderCompleteCurve(note, prev, prevHasError);
	  }
	
	  if (note[type].begin) {
	    var next = note[type].nextParent;
	    var nextHasError = note[type].nextHasError;
	
	
	    if (!next || next.system !== note.system) renderBeginCurve(note, nextHasError);else renderCompleteCurve(note, next, nextHasError);
	  }
	}

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _MIDI = __webpack_require__(42);
	
	var _MIDI2 = _interopRequireDefault(_MIDI);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var timeouts = [];
	
	var PlayerMixin = {
	
	  /**
	   * Start playing the song.
	   */
	  play: function play() {
	    var measures = this.parts[0].measures;
	
	    var time = 0; //audioCtx.currentTime
	
	    measures.forEach(function (cell) {
	      cell.data.forEach(function (data) {
	        switch (data.$type) {
	          case 'note':
	            // playNote(time, dur, freq)
	            timeouts.push(midiPlayNote(data, time));
	            time += data.duration.second;
	            break;
	          case 'rest':
	            time += data.duration.second;
	            break;
	          default:
	        }
	      });
	    });
	  },
	
	
	  /**
	   * Stop playing the song.
	   */
	  stop: function stop() {
	    timeouts.forEach(function (timeout) {
	      clearTimeout(timeout);
	    });
	    timeouts.length = 0;
	  }
	};
	
	// if (window.AudioContext) {
	//   var audioCtx = new window.AudioContext()
	//   var gainNode = audioCtx.createGain()
	//   gainNode.connect(audioCtx.destination)
	//   gainNode.gain.value = 0.5  // set the volume
	// }
	
	// // var oscillator = audioCtx.createOscillator()
	// // oscillator.connect(gainNode)
	// // oscillator.type = 'square' // sine | square | sawtooth | triangle | custom
	
	// function playNote(time, dur, freq) {
	//   if (!audioCtx) { return }
	
	//   var oscillator = audioCtx.createOscillator()
	//   oscillator.type = 'sine'
	//   oscillator.connect(audioCtx.destination)
	//   oscillator.frequency.value = freq
	//   oscillator.start(time)
	//   oscillator.stop(time + dur - 0.05)
	// }
	
	function midiPlayNote(note, time) {
	  var midiNumber = note.pitch.midiNumber;
	
	  var dur = note.duration.second;
	
	  function play() {
	    if (!note.tie.prevParent || note.tie.prevHasError) {
	      _MIDI2.default.noteOn(0, midiNumber, 100, 0);
	    }
	    if (!note.tie.nextParent || note.tie.nextHasError) {
	      _MIDI2.default.noteOff(0, midiNumber, dur);
	    }
	    note.el.addClass('mus-playing');
	    setTimeout(function () {
	      note.el.removeClass('mus-playing');
	    }, dur * 800 + 100);
	    console.log('Play: ' + note, time, dur, midiNumber);
	  }
	
	  return setTimeout(play, time * 800);
	}
	
	exports.default = PlayerMixin;

/***/ },
/* 42 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_42__;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,